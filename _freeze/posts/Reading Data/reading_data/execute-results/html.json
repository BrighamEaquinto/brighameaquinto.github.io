{
  "hash": "c790654c78fa58c54076aced7048ea15",
  "result": {
    "markdown": "---\ntitle: \"Reading Data\"\nmessage: false\nwarning: false\ntoc: true\n---\n\n\n\nThe [readr package](https://readr.tidyverse.org/) is the first package that we will learn about. This allows us to read in rectangular data like cvs files. \n\nThis is the typical way it goes when you have data located on your computer.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\ndataset <- read_csv(file_path)\n\nhead(dataset)\n```\n:::\n\n\n## Copy File Path Option \n\nCopy the file path from your computer and paste it in the function. One downside to this is you have to manually replace each backslash `\\` with a forwardslash `/`\n\nHere is an example: \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(tidyverse)\n\nbob <- read_csv(\"C:/Users/Bethany/Downloads/US_Population_200_Years.csv\")\n\nhead(bob)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 Ã— 7\n   Rank City             Population  Year PopDate    Longitude Latitude\n  <dbl> <chr>                 <dbl> <dbl> <chr>          <dbl>    <dbl>\n1     1 New York, NY          33131  1790 06/01/1790     -73.9     40.7\n2     2 Philadelphia, PA      44096  1790 06/01/1790     -75.1     40.0\n3     3 Boston, MA            18320  1790 06/01/1790     -71.1     42.3\n4     4 Charleston, SC        16359  1790 06/01/1790     -80.0     32.8\n5     5 Baltimore, MD         13503  1790 06/01/1790     -76.6     39.3\n6     7 Salem, MA              7921  1790 06/01/1790     -70.9     42.5\n```\n:::\n:::\n\n\n## \"Import Dataset\" Button Option\n\nAnother option is to use the \"Import Dataset\" button in the environment pane of RStudio. \n\n![](data_import_button.jpg)\n\n![](data_import_pop_up.jpg)\n\nThe data will now be in your environment.\n\n## Getting data from a URL\n\nOften you get your data from online somewhere like [GitHub](github.com) or [Kaggle](kaggle.com). While there is the option to download the file, then read it from your computer locally, like we just did above, there's also the option to read in data from a URL. \n\nA benefit is that less memory is used on your computer. Another is that you can send your analysis with the data being read in from a URL, and others will be able to run the script without any data issues. \n\nBelow is an example.  \n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\ndata1 <- read_csv(\"https://raw.githubusercontent.com/saundersg/Statistics-Notebook/master/Data/Rent.csv\")\n\nhead(data1)\n```\n:::\n\n\n## Other Data File Formats\n\nWhat if the dataset you have is not a csv? What if it's an excel file or the often unused tsc? \n\nOther options include: \n\n- `read_excel()` to read excel files like xls or xlsx\n- `read_tsv()` to read tsv files (tab separated files)\n- `read_rds()` to read RDS files (a data export option from SQLServer)\n\n\n## Exceptions to the Norm\n\nFor most cases this is the way to read in data. There are some examples of variations. \n\nSometimes the column headers are not the top row of the data. In this scenario, use the option `skip = 1` if there is one extra row above the headers.\n\nSometimes there are not column name at all and we'll have to give them to the dataset. How can we do this?\n\n\n<br>\n\n## Writing Files\n\nWith readr, we can write data files. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_csv(dataset_to_save, \"file_name.csv\")\n```\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}