{
  "hash": "0ff08f86920c8e97a94ae8d4867ffd83",
  "result": {
    "markdown": "---\ntitle: \"Lesson 3: Wangling Data: First Three Verbs\"\ntoc: true\ncode-overflow: scroll\ncode-line-numbers: true\n---\n\n::: {.cell massage='false'}\n\n:::\n\n\nThis lesson is focused on the first three wrangling verbs: `select()`, `filter()`, and `mutate()`. \n\n:::{.callout-tip}\n### Explanation\n`select()` is used to specify which columns to use as opposed to default to all of the columns\n\n`filter()` is used to subset data based on specified criteria\n\n`mutate()` is used to make new columns of data\n:::\n\nThis will be our starting dataframe used in each of the examples below. \n\n::: columns\n::: {.column width=\"10%\"}\n:::\n::: {.column width=\"70%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n|manufacturer |model | displ| year| cyl|trans      |drv | cty| hwy|fl |class   |\n|:------------|:-----|-----:|----:|---:|:----------|:---|---:|---:|:--|:-------|\n|audi         |a4    |   1.8| 1999|   4|auto(l5)   |f   |  18|  29|p  |compact |\n|audi         |a4    |   1.8| 1999|   4|manual(m5) |f   |  21|  29|p  |compact |\n|audi         |a4    |   2.0| 2008|   4|manual(m6) |f   |  20|  31|p  |compact |\n|audi         |a4    |   2.0| 2008|   4|auto(av)   |f   |  21|  30|p  |compact |\n|audi         |a4    |   2.8| 1999|   6|auto(l5)   |f   |  16|  26|p  |compact |\n:::\n:::\n\n:::\n::: {.column width=\"10%\"}\n:::\n:::\n\n<!-- ::: columns\n::: {.column width=\"35%\"}\n\n### Scenario\n\n:::\n::: {.column width=\"3%\"}\n:::\n::: {.column width=\"62%\"}\n\n:::\n::: -->\n\n<br> \n\n## Selecting Columns \n\n**Syntax**: `select()`\n\nThink of it as selecting check boxes for each column to use. Any selected, whether it's just one column or whether they're many columns, will be available once this `select()` code is completed.\n\n::: columns\n::: {.column width=\"35%\"}\n### Scenario\nSay we want this dataframe to the right where not all of the columns are needed, only the **manufacturer**, **model**, **cty**, and **hwy** columns. `select()` allows us to achieve this. \n\n:::\n::: {.column width=\"3%\"}\n:::\n::: {.column width=\"62%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n|manufacturer |model | cty| hwy|\n|:------------|:-----|---:|---:|\n|audi         |a4    |  18|  29|\n|audi         |a4    |  21|  29|\n|audi         |a4    |  20|  31|\n|audi         |a4    |  21|  30|\n|audi         |a4    |  16|  26|\n:::\n:::\n\n:::\n:::\n\n### Code Solution\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg %>% \n    select(manufacturer, model, cty, hwy)\n```\n:::\n\n\n<!-- <iframe \n    src=\"https://r4ds.had.co.nz/transform.html?q#select\" \n    style=\"border:1px solid black;\"\n    width=\"100%\"\n    height=\"500\" \n></iframe> -->\n\n\n<br> \n\n## Filtering Rows \n\n**Syntax**: `filter()`\n\nFiltering is used in the scenarios like, \"Only need students that are age 16 years old\", or \"Only the the redwood trees in this forest that are taller than 30 ft\". \n\n::: columns\n::: {.column width=\"35%\"}\n### Scenario\nSay we want this dataframe to the right where **the cars are made by ford** (`manufacturer` column) and **the amount of highway miles per gallon is greater than 20** (`hwy` column). `filter()` allows allows us to achieve this. \n:::\n::: {.column width=\"3%\"}\n:::\n::: {.column width=\"62%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n|manufacturer |model   | displ| year| cyl|trans      |drv | cty| hwy|fl |class      |\n|:------------|:-------|-----:|----:|---:|:----------|:---|---:|---:|:--|:----------|\n|ford         |mustang |   3.8| 1999|   6|manual(m5) |r   |  18|  26|r  |subcompact |\n|ford         |mustang |   3.8| 1999|   6|auto(l4)   |r   |  18|  25|r  |subcompact |\n|ford         |mustang |   4.0| 2008|   6|manual(m5) |r   |  17|  26|r  |subcompact |\n|ford         |mustang |   4.0| 2008|   6|auto(l5)   |r   |  16|  24|r  |subcompact |\n|ford         |mustang |   4.6| 1999|   8|auto(l4)   |r   |  15|  21|r  |subcompact |\n|ford         |mustang |   4.6| 1999|   8|manual(m5) |r   |  15|  22|r  |subcompact |\n:::\n:::\n\n:::\n:::\n### Code Solution\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg %>%\n    filter(manufacturer == \"ford\", hwy > 20)\n\n\nfilter(iris, Sepal.Length != '5.1') %>% head() \nfilter(iris, Species != 'setosa', Sepal.Length != 7) %>% head() \n\nfilter(iris, Species != c('setosa', 'versicolor')) %>% head() \nfilter(iris, !Species %in% c('setosa', 'versicolor')) %>% head() \n```\n:::\n\n\n:::{.callout-tip collapse=\"true\"}\n### Operators to use in Filter Statements\n\n::: columns\n::: {.column width=\"40%\"}\n\n**Basic Operators**:\n\n`>` greater than\n\n`<` less than\n\n`==` equals\n\n`>=` greater than or equal to\n\n`<=` less than or equal to \n:::\n::: {.column width=\"10%\"}\n:::\n::: {.column width=\"40%\"}\n\n**Advace Operators** \n\n`!=` is not equal to \n\n`%in% c()` is in \n\n:::\n:::\n:::\n\n<br>\n\n## Making New Columns \n\n**Syntax**: `mutate()`\n\nThink of the `mutate()` verb as starting with one column and change it to where you want it to become--mutating a column. You can make new columns not based on columns, based on one column, or based on multiple columns.  \n\n::: columns\n::: {.column width=\"35%\"}\n### Scenario\nSay we want this dataframe to the right where there was an error in the data and **the city miles per gallon needs 5 more miles than what it currently had** (`cty` column) and **we need the a column for the engine displacement** (`displ` column) **divided by the number of cylinders** (`cyl`column). In reality this second task is not a useful but we're doing it for practice sake. \n:::\n::: {.column width=\"3%\"}\n:::\n::: {.column width=\"62%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n|manufacturer |model | displ| year| cyl|trans      |drv | cty| hwy|fl |class   |   new_col|\n|:------------|:-----|-----:|----:|---:|:----------|:---|---:|---:|:--|:-------|---------:|\n|audi         |a4    |   1.8| 1999|   4|auto(l5)   |f   |  23|  29|p  |compact | 0.4500000|\n|audi         |a4    |   1.8| 1999|   4|manual(m5) |f   |  26|  29|p  |compact | 0.4500000|\n|audi         |a4    |   2.0| 2008|   4|manual(m6) |f   |  25|  31|p  |compact | 0.5000000|\n|audi         |a4    |   2.0| 2008|   4|auto(av)   |f   |  26|  30|p  |compact | 0.5000000|\n|audi         |a4    |   2.8| 1999|   6|auto(l5)   |f   |  21|  26|p  |compact | 0.4666667|\n|audi         |a4    |   2.8| 1999|   6|manual(m5) |f   |  23|  26|p  |compact | 0.4666667|\n:::\n:::\n\n:::\n:::\n### Code Solution\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg %>%\n    mutate(cty = cty + 5, new_col = displ/cyl)\n```\n:::\n\n\n\n## Practice Exercises\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}