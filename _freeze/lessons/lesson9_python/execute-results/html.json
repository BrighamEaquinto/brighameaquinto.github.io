{
  "hash": "2d366d90a35ed7e75916a4aa97de7570",
  "result": {
    "markdown": "---\ntitle: \"Lesson 09: R vs. Python\"\nsubtitle: \"'R' Bootcamp, huh?\"\nimage: \"python-logo-only.png\"\nwarning: false\ntoc: true \n---\n\n::: {.cell}\n\n:::\n\n\n\n::: {.panel-tabset}\n\n# Comparison 1\n\n\n\n::: columns\n::: {.column width=\"45%\"}\n\n## R \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(knitr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\niris %>% \n  select(Species, Sepal.Width, Sepal.Length) %>% \n  filter(Sepal.Width >= 3, Species %in% c(\"setosa\", \"virginica\")) %>% \n  mutate(\n    Sepal_Ratio = round(Sepal.Width/Sepal.Length, 4), \n    small_ratio = ifelse(Sepal_Ratio < 0.7, 1, 0)) %>%\n  arrange(Species, desc(Sepal.Length)) %>% \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Species Sepal.Width Sepal.Length Sepal_Ratio small_ratio\n1  setosa         4.0          5.8      0.6897           1\n2  setosa         4.4          5.7      0.7719           0\n3  setosa         3.8          5.7      0.6667           1\n4  setosa         4.2          5.5      0.7636           0\n5  setosa         3.5          5.5      0.6364           1\n6  setosa         3.9          5.4      0.7222           0\n```\n:::\n:::\n\n \n:::\n::: {.column width=\"10%\"}\n:::\n::: {.column width=\"45%\"}\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nimport numpy as np\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n(iris\n  .filter([\"Species\", \"Sepal.Width\", \"Sepal.Length\"])\n  .query('(`Sepal.Width` >= 3) & (Species in [\"setosa\", \"virginica\"])')\n  .assign(\n    Sepal_Ratio = lambda x: round( x['Sepal.Width'] / x['Sepal.Length'], 4), \n    small_ratio = lambda x: np.where(x['Sepal_Ratio'], 1, 0))\n  .sort_values([\"Species\", \"Sepal.Length\"], ascending = [True, False])\n  .head() )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Species  Sepal.Width  Sepal.Length  Sepal_Ratio  small_ratio\n14  setosa          4.0           5.8       0.6897            1\n15  setosa          4.4           5.7       0.7719            1\n18  setosa          3.8           5.7       0.6667            1\n33  setosa          4.2           5.5       0.7636            1\n36  setosa          3.5           5.5       0.6364            1\n```\n:::\n:::\n\n\n\n:::\n:::\n\n\n\n# Comparison 2 \n\n\n\n\nIn this article you will see the same analysis preformed in R & Python. Note the similarities and differences. \n\n::: {layout=\"[15,-10,15]\"}\n\n![](Rlogo.png)\n\n![](python-logo-only.png)\n\n:::\n\n::: columns\n::: {.column width=\"47.5%\"}\n\n<center>\n\n# R\n\n</center>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\n\ndat <- read_csv(\"C:/Users/Bethany/Downloads/grades.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nis_math <- c(\"FDMAT108\", \"MATH101\")\nis_stats <- c(\"MATH221A\", \"MATH325\")\nis_major <- c(\"CIT111\", \"CIT225\")\nis_general_ed <- c(\"FDAMF101\", \"FDENG101\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1 <- dat %>% \n  select(!c(`Course Program`, `Catalog`, `Grade Type`)) %>% \n  filter(!str_starts(Grade, \"N/A\")) %>% \n  mutate(\n    Grade = fct_relevel(Grade, c(\"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"F\", \"P\", \"W\")), \n    Semester = fct_relevel(Semester, \"WI19\", \"SP19\", \"FA19\", \"WI20\", \"SP20\", \"FA20\", \"WI21\", \"SP21\", \"FA21\", \"WI22\", \"SP22\", \"FA22\"), \n    `Grade Points` = case_when(\n      Grade == \"A\" ~ 4, \n      Grade == \"A-\" ~ 3.7, \n      Grade == \"B+\" ~ 3.4, \n      Grade == \"B\" ~ 3,\n      Grade == \"B-\" ~ 2.7, \n      Grade == \"C+\" ~ 2.4,\n      Grade == \"C\" ~ 2, \n      Grade == \"C-\" ~ 1.7,\n      Grade == \"D+\" ~ 0.4, \n      Grade == \"D\" ~ 1,\n      Grade == \"D-\" ~ 0.7, \n      Grade == \"F\" ~ 0,\n      Grade == \"UW\" ~ 0, \n      Grade == \"P\" ~ NA_real_,\n      Grade == \"W\" ~ NA_real_, \n      Grade == \"I\" ~ NA_real_,\n      Grade == \"T\" ~ NA_real_, \n      Grade == \"NR\" ~ NA_real_), \n    Course = str_replace(Course, \"-\\\\d\\\\d\", \"\"), \n    Course = str_replace(Course, \"\\\\W\", \"\"), \n    is_math = case_when(Course %in% is_math ~ 1, TRUE ~ 0),\n    is_stats = case_when(Course %in% is_stats ~ 1, TRUE ~ 0), \n    is_major = case_when(Course %in% is_major ~ 1, TRUE ~ 0), \n    is_general_ed = case_when(Course %in% is_general_ed ~ 1, TRUE ~ 0)\n)\n```\n:::\n\n\n<n>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(dat1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 10\n  Course   `Course Title` Credits Grade Semester `Grade Points` is_math is_stats\n  <chr>    <chr>            <dbl> <fct> <fct>             <dbl>   <dbl>    <dbl>\n1 DANCE18… Social Dance,…       1 P     WI19                 NA       0        0\n2 FDAMF101 American Foun…       3 A     WI19                  4       0        0\n3 FDENG101 Writing & Rea…       3 A     WI19                  4       0        0\n4 FDMAT108 Math for the …       3 A     WI19                  4       1        0\n5 FDREL275 Teachings of …       2 A     WI19                  4       0        0\n6 GS106A   College Succe…       1 A     WI19                  4       0        0\n# ℹ 2 more variables: is_major <dbl>, is_general_ed <dbl>\n```\n:::\n:::\n\n\n:::\n::: {.column width=\"5%\"}\n:::\n::: {.column width=\"47.5%\"}\n\n<center>\n\n# Python \n\n</center>\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nimport numpy as np\nfrom plotnine import *\ndat = pd.read_csv(\"C:/Users/Bethany/Downloads/grades.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nis_math = (\"FDMAT108\", \"MATH101\")\nis_stats = (\"MATH221A\", \"MATH325\")\nis_major = (\"CIT111\", \"CIT225\")\nis_general_ed = (\"FDAMF101\", \"FDENG101\")\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndat1 = (dat\n    .drop(['Course Program', 'Catalog', 'Grade Type'], axis = 1)\n    .query(\"~Grade.str.startswith('N/A')\")\n    .assign(\n        Grade = lambda X: pd.Categorical(X.Grade, categories = [\"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"F\", \"P\", \"W\"]), \n        Semester = lambda X: pd.Categorical(X.Semester, [\"WI19\", \"SP19\", \"FA19\", \"WI20\", \"SP20\", \"FA20\", \"WI21\", \"SP21\", \"FA21\", \"WI22\", \"SP22\", \"FA22\"]),\n        Grade_Points = lambda X: X['Grade'].replace({\n            \"A\": 4, \n            \"A-\": 3.7,\n            \"B+\": 3.4, \n            \"B\": 3,\n            \"B-\": 2.7, \n            \"C+\": 2.4,\n            \"C\": 2, \n            \"C-\": 1.7,\n            \"D+\": 0.4, \n            \"D\": 1,\n            \"D-\": 0.7, \n            \"F\": 0,\n            \"UW\": 0, \n            \"P\": np.nan,\n            \"W\": np.nan, \n            \"I\": np.nan,\n            \"T\": np.nan, \n            \"NR\": np.nan}),\n        Course = lambda X: X['Course'].replace({r\"-\\d\\d\": \"\", r\"\\W\":\"\"}, regex=True),\n        is_math = lambda X: np.where(X['Course'].isin(is_math), True, False), \n        is_stats = lambda X: np.where(X['Course'].isin(is_stats), True, False), \n        is_major = lambda X: np.where(X['Course'].isin(is_major), 1, 0), \n        is_general_ed = lambda X: np.where(X['Course'].isin(is_general_ed), 1, 0)\n        )\n)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndat1.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      Course                     Course Title  ...  is_major is_general_ed\n0  DANCE180M          Social Dance, Beginning  ...         0             0\n1   FDAMF101             American Foundations  ...         0             1\n2   FDENG101  Writing & Reasoning Foundations  ...         0             1\n3   FDMAT108          Math for the Real World  ...         0             0\n4   FDREL275      Teachings of Book of Mormon  ...         0             0\n\n[5 rows x 10 columns]\n```\n:::\n:::\n\n\n:::\n:::\n\n\n\n\n# Tutorial \n\n\n<center> \n  <h2> \n    Reading in Data\n  </h2>\n</center>\n\n::: columns\n::: {.column width=\"45%\"}\n\n<center> \n  <b> \n    R (Dplyr)\n  </b>\n</center>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\ndat1 <- read_csv()\n```\n:::\n\n \n:::\n::: {.column width=\"10%\"}\n:::\n::: {.column width=\"45%\"}\n\n<center> \n  <b> \n    Python (Pandas)\n  </b>\n</center>\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\ndat1 = pd.read_csv()\n```\n:::\n\n\n\n:::\n:::\n\n<center> \n  <h2> \n    Wrangling Verbs\n  </h2>\n</center>\n\n\n\n::: columns\n::: {.column width=\"45%\"}\n\nWhat we are familiar with in R (Tidyverse): \n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nselect()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nfilter()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\ngroup_by()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nsummarise()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\narrange()\n```\n:::\n\n\n:::\n::: {.column width=\"10%\"}\n:::\n::: {.column width=\"45%\"}\n\nHere are the Python (Pandas) translations: \n\n::: {.cell}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\n.filter()\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\n.query()\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\n.groupby()\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\n.agg()\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code  code-line-numbers=\"false\"}\n.sort_values()\n```\n:::\n\n\n:::\n:::\n\n\n<center> \n  <h2> \n    Visualization\n  </h2>\n</center>\n\n\n::: columns\n::: {.column width=\"45%\"}\n\n- BaseR\n- ggplot2\n\n:::\n::: {.column width=\"10%\"}\n:::\n::: {.column width=\"45%\"}\n\n\n\n**Package Options Include**: \n\n- Altair (Very good plotting package, based on the grammer of graphics)\n- Plotnine (This is how to use ggplot2 in python)\n- Seaborn (Good plotting package, does not follow the grammer of graphics)\n- Plotly (Good plotting package, does not follow the grammer of graphics)\n- Matplotlib/PyPlot (Good, basic plotting package)\n\n\n:::\n:::\n\n\n\n\n# Practice\n\n<a href=\"insurance.csv\" download>Click to download</a>\n\n\n### Question 1\n\n1) Grab the `age`, `sex`, and `charges` columns \n\n2) Filter the data to only females\n\n3) Sort the data by age decending \n\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"true\" code-summary=\"Code Solution\"}\nimport pandas as pd\n\ndat = pd.read_csv(\"insurance.csv\")\n\n(dat\n  .filter(['age', 'sex', 'charges'], axis = 1)\n  .query('sex == \"female\"')\n  .sort_values('age')\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     age     sex      charges\n46    18  female   3393.35635\n728   18  female   2217.60120\n803   18  female  38792.68560\n942   18  female   2217.46915\n50    18  female   2211.13075\n..   ...     ...          ...\n768   64  female  14319.03100\n94    64  female  47291.05500\n664   64  female  27037.91410\n801   64  female  14313.84630\n890   64  female  29330.98315\n\n[662 rows x 3 columns]\n```\n:::\n:::\n\n\n\n### Question 2 \n\n1) Grab the `region` and `charges` columns \n\n2) Filter the data to charges greater than 2000 \n\n3) Group by region and find the total charges by region\n\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"true\" code-summary=\"Code Solution\"}\nimport pandas as pd\n\ndat = pd.read_csv(\"insurance.csv\")\n\n(dat\n  .filter([\"charges\", 'region'], axis = 1)\n  .query('charges > 1000')\n  .groupby(['region'])\n  .agg(\n    Sum_Charges = ('charges', 'sum'),\n    Total_Charges = ('charges', 'count'))\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            Sum_Charges  Total_Charges\nregion                                \nnortheast  4.343669e+06            324\nnorthwest  4.035712e+06            325\nsoutheast  5.363690e+06            364\nsouthwest  4.012755e+06            325\n```\n:::\n:::\n\n\n\n\n::: ",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}