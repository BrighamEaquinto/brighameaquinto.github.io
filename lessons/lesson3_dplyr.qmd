---
title: "Lesson 3: First Three Wrangling Verbs"
toc: true
code-overflow: scroll
code-line-numbers: true
---

```{r}
#| echo: false
#| massage: false
#| warning: false

library(tidyverse)
```

This lesson is focused on the first three wrangling verbs: `select()`, `filter()`, and `mutate()`. 

:::{.callout-tip}
### Explanation
`select()` is used to specify which columns to use as opposed to default to all of the columns

`filter()` is used to subset data based on specified criteria

`mutate()` is used to make new columns of data
:::

This will be our starting dataframe used in each of the examples below. 

::: columns
::: {.column width="10%"}
:::
::: {.column width="70%"}
```{r}
#| echo: false
knitr::kable(head(mpg, 5))
```
:::
::: {.column width="10%"}
:::
:::

<!-- ::: columns
::: {.column width="35%"}

### Scenario

:::
::: {.column width="3%"}
:::
::: {.column width="62%"}

:::
::: -->

<br> 

## Selecting Columns 

**Syntax**: `select()`

Think of it as selecting check boxes for each column to use. Any selected, whether it's just one column or whether they're many columns, will be available once this `select()` code is completed.

::: columns
::: {.column width="35%"}
### Scenario
Say we want this dataframe to the right where not all of the columns are needed, only the **manufacturer**, **model**, **cty**, and **hwy** columns. `select()` allows us to achieve this. 

:::
::: {.column width="3%"}
:::
::: {.column width="62%"}
```{r}
#| echo: false

data <- mpg %>% 
    select(manufacturer, model, cty, hwy) %>% 
    head(5)

knitr::kable(data)
```
:::
:::

### Code Solution
```{r}
#| eval: false
mpg %>% 
    select(manufacturer, model, cty, hwy)
```

<!-- <iframe 
    src="https://r4ds.had.co.nz/transform.html?q#select" 
    style="border:1px solid black;"
    width="100%"
    height="500" 
></iframe> -->


<br> 

## Filtering Rows 

**Syntax**: `filter()`

Filtering is used in the scenarios like, "Only need students that are age 16 years old", or "Only the the redwood trees in this forest that are taller than 30 ft". 

::: columns
::: {.column width="35%"}
### Scenario
Say we want this dataframe to the right where **the cars are made by ford** (`manufacturer` column) and **the amount of highway miles per gallon is greater than 20** (`hwy` column). `filter()` allows allows us to achieve this. 
:::
::: {.column width="3%"}
:::
::: {.column width="62%"}
```{r}
#| echo: false

data <- mpg %>%
    filter(manufacturer == "ford", hwy > 20) %>% 
    head()

knitr::kable(data)
```
:::
:::
### Code Solution
```{r}
#| eval: false

mpg %>%
    filter(manufacturer == "ford", hwy > 20)
```

:::{.callout-tip collapse="true"}
### Operators to use in Filter Statements

::: columns
::: {.column width="40%"}

**Basic Operators**:

`>` greater than

`<` less than

`==` equals

`>=` greater than or equal to

`<=` less than or equal to 
:::
::: {.column width="10%"}
:::
::: {.column width="40%"}

**Advace Operators** 

`!=` is not equal to 

`%in% c()` is in 

:::
:::
:::

<br>

## Making New Columns 

**Syntax**: `mutate()`

Think of the `mutate()` verb as starting with one column and change it to where you want it to become--mutating a column. You can make new columns not based on columns, based on one column, or based on multiple columns.  

::: columns
::: {.column width="35%"}
### Scenario
Say we want this dataframe to the right (make sure to scroll to see the other columns) where there was an error in the data and **the city miles per gallon needs 5 more miles than what it currently had** (`cty` column) and **we need the a column for the engine displacement** (`displ` column) **divided by the number of cylinders** (`cyl`column). In reality this second task is not a useful but we're doing it for practice sake. 
:::
::: {.column width="3%"}
:::
::: {.column width="62%"}
```{r}
#| echo: false

data <- mpg %>%
    mutate(cty = cty + 5, new_col = displ/cyl) %>% 
    head()

knitr::kable(data)
```
:::
:::
### Code Solution
```{r}
#| eval: false
mpg %>%
    mutate(cty = cty + 5, new_col = displ/cyl)
```

<br> 

## Practice Exercises

New dataset in use for the practices exercises:

```{r}
#| message: false
#| warning: false
#| echo: true

library(tidyverse)
dat <- read_csv("https://raw.githubusercontent.com/BrighamEaquinto/brighameaquinto.github.io/master/datasets/insurance.csv")
```

### Question 1
Select the age, sex, and bmi columns
```{r}
#| echo: false

dat %>% 
    select(age, sex, bmi) %>%
    head() %>%  
    knitr::kable()
```
```{r}
#| code-summary: "Code Solution"
#| code-fold: true
#| eval: false

dat %>% 
    select(age, sex, bmi)
```
<br>

### Question 2
Select the `charges`, `region`, and `age` columns.

::: columns
::: {.column width="30%"}
:::
::: {.column width="40%"}
```{r}
#| echo: false

dat %>% 
    select(charges, region, age) %>%
    head() %>%  
    knitr::kable()
```
:::
::: {.column width="30%"}
:::
:::
```{r}
#| code-summary: "Code Solution"
#| code-fold: true
#| eval: false

dat %>% 
    select(charges, region, age)
```
<br>

### Question 3 
Filter the data where `sex` is only male and `region` is only northeast.
```{r}
#| echo: false

dat %>% 
    filter(sex == "male", region == "northeast") %>%
    head() %>%  
    knitr::kable()
```
```{r}
#| code-summary: "Code Solution"
#| code-fold: true
#| eval: false

dat %>% 
    filter(sex == "male", region == "northeast")
```
<br>

### Question 4 

Filter the data like this: 

- `age` is younger than or equal to 40
- `bmi` is greater than 21
```{r}
#| echo: false

dat %>% 
    filter(age <= 40, bmi > 21) %>%
    head() %>%  
    knitr::kable()
```
```{r}
#| code-summary: "Code Solution"
#| code-fold: true
#| eval: false

dat %>% 
    filter(age <= 40, bmi > 21)
```
<br> 

### Question 5 

Make a new column called `bmi_modified` that is the of the bmi - 12

```{r}
#| echo: false

dat %>% 
    mutate(bmi_modified = bmi - 12) %>%
    head() %>%  
    knitr::kable()
```
```{r}
#| code-summary: "Code Solution"
#| code-fold: true
#| eval: false

dat %>% 
    mutate(bmi_modified = bmi - 12) 
```

<br> 

### Question 6
Make a new column called `age_modified` that is the current age divided by 2
```{r}
#| echo: false

dat %>% 
    mutate(age_modified = age/2) %>%
    head() %>%  
    knitr::kable()
```
```{r}
#| code-summary: "Code Solution"
#| code-fold: true
#| eval: false

dat %>% 
    mutate(age_modified = age/2) 
```
<br>

## Question 7: Combining It All Together
::: columns
::: {.column width="35%"}
- Only use the age, sex, and charges columns
- Make sure the age column is greater than 50 and there are only females
- Make a new column called **real_charges** which is the charges times 4 
:::
::: {.column width="3%"}
:::
::: {.column width="62%"}
```{r}
#| echo: false

dat %>% 
    select(age, sex, charges) %>% 
    filter(age > 50, sex == "female") %>% 
    mutate(real_charges = charges * 4) %>%
    head() %>%  
    knitr::kable()
```
:::
:::
```{r}
#| code-summary: "Code Solution"
#| code-fold: true
#| eval: false

dat %>% 
    select(age, sex, charges) %>% 
    filter(age > 50, sex == "female") %>% 
    mutate(real_charges = charges * 4)
```
