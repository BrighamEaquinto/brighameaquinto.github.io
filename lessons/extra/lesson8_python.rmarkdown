---
title: "Lesson 8: R vs. Python"
format: html
warning: false
toc: true 
---

```{r}
#| echo: false
library(reticulate)
use_python("C:\\Users\\Bethany\\AppData\\Local\\Programs\\Python\\PYTHON~1\\python.exe")
# use_virtualenv("myenv")
```



::: {.panel-tabset}

# Comparison 1



::: columns
::: {.column width="45%"}

## R 


```{r}
library(tidyverse)
library(knitr)
```

```{r}

iris %>% 
  select(Species, Sepal.Width, Sepal.Length) %>% 
  filter(Sepal.Width >= 3, Species %in% c("setosa", "virginica")) %>% 
  mutate(
    Sepal_Ratio = round(Sepal.Width/Sepal.Length, 4), 
    small_ratio = ifelse(Sepal_Ratio < 0.7, 1, 0)) %>%
  arrange(Species, desc(Sepal.Length)) %>% 
  head()

```

 
:::
::: {.column width="10%"}
:::
::: {.column width="45%"}

## Python


```{python}
import pandas as pd
import numpy as np
```

```{python}
#| echo: false
#| 
iris = (
    pd.read_csv("https://gist.github.com/curran/a08a1080b88344b0c8a7/raw/0e7a9b0a5d22642a06d3d5b9bcbad9890c8ee534/iris.csv")
    .rename(columns = 
        {'sepal_length':"Sepal.Length", 
        'sepal_width':"Sepal.Width", 
        'petal_length':"Petal.Length", 
        'petal_width':"Petal.Width",
        'species':"Species"
        })
)

```

```{python}
(iris
  .filter(["Species", "Sepal.Width", "Sepal.Length"])
  .query('(`Sepal.Width` >= 3) & (Species in ["setosa", "virginica"])')
  .assign(
    Sepal_Ratio = lambda x: round( x['Sepal.Width'] / x['Sepal.Length'], 4), 
    small_ratio = lambda x: np.where(x['Sepal_Ratio'], 1, 0))
  .sort_values(["Species", "Sepal.Length"], ascending = [True, False])
  .head() )
```



:::
:::



# Comparison 2 




In this article you will see the same analysis preformed in R & Python. Note the similarities and differences. 

::: {layout="[15,-10,15]"}

![](Rlogo.png)

![](python-logo-only.png)

:::

::: columns
::: {.column width="47.5%"}

<center>

# R

</center>


```{r}
library(tidyverse)


dat <- read_csv("C:/Users/Bethany/Downloads/grades.csv")
dat <- read_csv("C:\\Users\\Bethany\\Downloads\\grades.csv")
```

```{r}
is_math <- c("FDMAT108", "MATH101")
is_stats <- c("MATH221A", "MATH325")
is_major <- c("CIT111", "CIT225")
is_general_ed <- c("FDAMF101", "FDENG101")
```

```{r}
dat1 <- dat %>% 
  select(!c(`Course Program`, `Catalog`, `Grade Type`)) %>% 
  filter(!str_starts(Grade, "N/A")) %>% 
  mutate(
    Grade = fct_relevel(Grade, c("A", "A-", "B+", "B", "B-", "C+", "C", "C-", "D+", "D", "D-", "F", "P", "W")), 
    Semester = fct_relevel(Semester, "WI19", "SP19", "FA19", "WI20", "SP20", "FA20", "WI21", "SP21", "FA21", "WI22", "SP22", "FA22"), 
    `Grade Points` = case_when(
      Grade == "A" ~ 4, 
      Grade == "A-" ~ 3.7, 
      Grade == "B+" ~ 3.4, 
      Grade == "B" ~ 3,
      Grade == "B-" ~ 2.7, 
      Grade == "C+" ~ 2.4,
      Grade == "C" ~ 2, 
      Grade == "C-" ~ 1.7,
      Grade == "D+" ~ 0.4, 
      Grade == "D" ~ 1,
      Grade == "D-" ~ 0.7, 
      Grade == "F" ~ 0,
      Grade == "UW" ~ 0, 
      Grade == "P" ~ NA_real_,
      Grade == "W" ~ NA_real_, 
      Grade == "I" ~ NA_real_,
      Grade == "T" ~ NA_real_, 
      Grade == "NR" ~ NA_real_), 
    Course = str_replace(Course, "-\\d\\d", ""), 
    Course = str_replace(Course, "\\W", ""), 
    is_math = case_when(Course %in% is_math ~ 1, TRUE ~ 0),
    is_stats = case_when(Course %in% is_stats ~ 1, TRUE ~ 0), 
    is_major = case_when(Course %in% is_major ~ 1, TRUE ~ 0), 
    is_general_ed = case_when(Course %in% is_general_ed ~ 1, TRUE ~ 0)
)
```


<n>


```{r}
head(dat1)
```


:::
::: {.column width="5%"}
:::
::: {.column width="47.5%"}

<center>

# Python 

</center>


```{python}
import pandas as pd
import numpy as np
from plotnine import *
dat = pd.read_csv("C:/Users/Bethany/Downloads/grades.csv")
```

```{python}
is_math = ("FDMAT108", "MATH101")
is_stats = ("MATH221A", "MATH325")
is_major = ("CIT111", "CIT225")
is_general_ed = ("FDAMF101", "FDENG101")
```

```{python}
dat1 = (dat
    .drop(['Course Program', 'Catalog', 'Grade Type'], axis = 1)
    .query("~Grade.str.startswith('N/A')")
    .assign(
        Grade = lambda X: pd.Categorical(X.Grade, categories = ["A", "A-", "B+", "B", "B-", "C+", "C", "C-", "D+", "D", "D-", "F", "P", "W"]), 
        Semester = lambda X: pd.Categorical(X.Semester, ["WI19", "SP19", "FA19", "WI20", "SP20", "FA20", "WI21", "SP21", "FA21", "WI22", "SP22", "FA22"]),
        Grade_Points = lambda X: X['Grade'].replace({
            "A": 4, 
            "A-": 3.7,
            "B+": 3.4, 
            "B": 3,
            "B-": 2.7, 
            "C+": 2.4,
            "C": 2, 
            "C-": 1.7,
            "D+": 0.4, 
            "D": 1,
            "D-": 0.7, 
            "F": 0,
            "UW": 0, 
            "P": np.nan,
            "W": np.nan, 
            "I": np.nan,
            "T": np.nan, 
            "NR": np.nan}),
        Course = lambda X: X['Course'].replace({r"-\d\d": "", r"\W":""}, regex=True),
        is_math = lambda X: np.where(X['Course'].isin(is_math), True, False), 
        is_stats = lambda X: np.where(X['Course'].isin(is_stats), True, False), 
        is_major = lambda X: np.where(X['Course'].isin(is_major), 1, 0), 
        is_general_ed = lambda X: np.where(X['Course'].isin(is_general_ed), 1, 0)
        )
)
```

```{python}
dat1.head()
```


:::
:::




# Tutorial 


### Reading in Data 

::: columns
::: {.column width="45%"}

**In R (Dplyr)**:


```{r}
#| eval: false
library(tidyverse)
dat1 <- read_csv()
```

 
:::
::: {.column width="10%"}
:::
::: {.column width="45%"}

**In Python (Pandas)**:


```{python}
#| eval: false
import pandas as pd
dat1 = pd.read_csv()
```



:::
:::

### Wrangling Verbs


::: columns
::: {.column width="45%"}

What we are familiar with in R (Tidyverse): 


```{r}
#| eval: false
#| code-line-numbers: false
select()
```

```{r}
#| eval: false
#| code-line-numbers: false
filter()
```

```{r}
#| eval: false
#| code-line-numbers: false
group_by()
```

```{r}
#| eval: false
#| code-line-numbers: false
summarise()
```

```{r}
#| eval: false
#| code-line-numbers: false
arrange()
```




:::
::: {.column width="10%"}
:::
::: {.column width="45%"}

Here are the Python (Pandas) translations: 

```{python}
#| eval: false
#| code-line-numbers: false
.filter()
```

```{python}
#| eval: false
#| code-line-numbers: false
.query()
```

```{python}
#| eval: false
#| code-line-numbers: false
.groupby()
```

```{python}
#| eval: false
#| code-line-numbers: false
.agg()
```

```{python}
#| eval: false
#| code-line-numbers: false
.sort_values()
```




:::
:::



### Visualization

**Package Options Include**: 

- Seaborn (Very good plotting package)
- Plotly (Very good plotting package)
- PyPlot (Good, basic plotting package)
- Altair (I do not recomend this package; this is what is taught in DS 250)
- Plotnine (This is how to use ggplot in python)






# Practice

<a href="insurance.csv" download>Click to download</a>


### Question 1

1) Grab the `age`, `sex`, and `charges` columns 

2) Filter the data to only females

3) Sort the data by age decending 


```{python}
#| code-fold: true
#| code-summary: "Code Solution"
import pandas as pd

dat = pd.read_csv("insurance.csv")

(dat
  .filter(['age', 'sex', 'charges'], axis = 1)
  .query('sex == "female"')
  .sort_values('age')
)
```



### Question 2 

1) Grab the `region` and `charges` columns 

2) Filter the data to charges greater than 2000 

3) Group by region and find the total charges by region


```{python}
#| code-fold: true
#| code-summary: "Code Solution"
import pandas as pd

dat = pd.read_csv("insurance.csv")

(dat
  .filter(["charges", 'region'], axis = 1)
  .query('charges > 1000')
  .groupby(['region'])
  .agg(
    Sum_Charges = ('charges', 'sum'),
    Total_Charges = ('charges', 'count'))
)
```




::: 
