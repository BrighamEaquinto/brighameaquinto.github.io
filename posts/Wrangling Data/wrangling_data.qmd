---
title: "Wrangling Data"
format: 
  html:
    page-layout: full
---

# Third Comparison: Base R vs the Tidyverse

:::: {.columns}
::: {.column width="45%"}

Base R is the native tools that R has to deal with data. The syntax is outdated and better tools are available to use. 

The syntax to work in Base R is very similar to native python syntax. The biggest downside is that _it's not possible to chain operations together_ like selecting columns and filtering data. You would to constantly assign and reassign variables which results in very messy and unreadable code. 

If you use this, I will turn in my grave. Please don't make your life more difficult, use the Tidyverse.

Base R is native to R; no additional installations are required. 

::: {.column width="10%"}
:::                 

:::
::: {.column width="45%"}
The Tidyverse allows chainable actions like this: 
```{r}
#| eval: false

new_dataset <- dataset %>% 
    select() %>%
    filter() %>% 
    mutate() %>% 
    group_by() %>% 
    summarise() %>%
    arrange()

```

Run this code in the console to download the tidyverse

```{r}
#| eval: false
install.packages("tidyverse")
```

In order to be able to use this package, put this code at the top of your R Script or RMD file 

```{r}
#| eval: false 
library(tidyverse)
```
:::
::::

<br><br>

<!-- <h3 align="center"> Selecting Columns </h3> -->

## Selecting Columns 

:::::::::::::: {.columns}
::: {.column width=\"45%\"}
###### Base R
`df$column_name`

`df[[]]`
:::
::: {.column width=\"45%\"}
###### Tidyverse
```{r}
#| eval: false
df %>% select(column1, column2)
```
:::
::::::::::::::

## Making New Columns

:::::::::::::: {.columns}
::: {.column width=\"45%\"}
###### Base R 
`df$profit <- df$revenue - df$cost`
:::
::: {.column width=\"45%\"}
###### Tidyverse
```{r}
#| eval: false
df %>% mutate(profit = revenue - cost)
```
:::
::::::::::::::

<!-- <h3 align="center"> Filtering Data </h3> -->

## Filtering Data

:::::::::::::: {.columns}
::: {.column width=\"45%\"}
###### Base R 

`df[df$temperature > 45]`
:::
::: {.column width=\"45%\"}
###### Tidyverse 

```{r}
#| eval: false
df %>% filter(temperature > 45)
```
:::
::::::::::::::


## Grouping & Summarising Data

:::::::::::::: {.columns}
::: {.column width=\"45%\"}
###### Base R 
I'm not sure how to do this in BaseR... and that's okay

:::
::: {.column width=\"45%\"}

###### Tidyverse 


```{r}
#| eval: false

df %>% 
    group_by(city) %>% 
    summarise(Avg_House_Price = mean(house_price))
```

:::
::::::::::::::

## Sorting Data

:::::::::::::: {.columns}
::: {.column width=\"45%\"}
###### Base R

`mtcars[order(mpg, -cyl),]`

:::
::: {.column width=\"45%\"}
###### Tidyverse

```{r}
#| eval: false
mtcars %>% arrange(mpg, desc(cyl))
```

:::
:::::::::::::: 



<br><br>

Check out [this page](https://dplyr.tidyverse.org/articles/base.html) for more comparisons. 

Filtering Data in Base R: 

- https://www.mitchcraver.com/2021/06/15/subsetting-and-filtering-a-data-frame-in-r/
- https://cran.r-project.org/web/packages/crunch/vignettes/filters.html

