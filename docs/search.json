[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DSS R BootCamp",
    "section": "",
    "text": "Lesson 1: Introduction & Installation\n\n\n\n\n\n\n\n \n\n\n\n\n\n\nLesson 2: Reading Data\n\n\nLearning the ggplot2 package\n\n\n\n\n \n\n\n\n\n\n\nLesson 3: First Three Wrangling Verbs\n\n\n\n\n\n\n\n \n\n\n\n\n\n\nLesson 4: Last Three Wrangling Verbs\n\n\n\n\n\n\n\n \n\n\n\n\n\n\nLesson 5: Graphing Part 1\n\n\n\n\n\n\n\n \n\n\n\n\n\n\nLesson 6: Graphing Part 2\n\n\n\n\n\n\n\n \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "lessons/extra/lesson7_practice.html",
    "href": "lessons/extra/lesson7_practice.html",
    "title": "Lesson 7: All Together",
    "section": "",
    "text": "Click to download data"
  },
  {
    "objectID": "lessons/extra/lesson7_practice.html#part-1",
    "href": "lessons/extra/lesson7_practice.html#part-1",
    "title": "Lesson 7: All Together",
    "section": "Part 1",
    "text": "Part 1\nShow me a distribution of the departure delay times by each carrier for flights that depart after 5pm\n\n\n\n\n\n\nIdea for Graph"
  },
  {
    "objectID": "lessons/extra/lesson7_practice.html#part-2",
    "href": "lessons/extra/lesson7_practice.html#part-2",
    "title": "Lesson 7: All Together",
    "section": "Part 2",
    "text": "Part 2\nWhich airports out of JFK, LGA, & EWR have the lowest average departure delay time?\n\n\nCode\nflights %>% \n    filter(!is.na(dep_delay), origin %in% c('JFK', 'LGA', 'EWR')) %>% \n    group_by(origin) %>% \n    summarise(Average = mean(dep_delay)) %>% \n    knitr::kable()\n\n\n\n\n\norigin\nAverage\n\n\n\n\nEWR\n15.10795\n\n\nJFK\n12.11216\n\n\nLGA\n10.34688"
  },
  {
    "objectID": "lessons/extra/lesson8_python.html#r",
    "href": "lessons/extra/lesson8_python.html#r",
    "title": "Lesson 8: R vs. Python",
    "section": "R",
    "text": "R\n\nlibrary(tidyverse)\nlibrary(knitr)\n\n\niris %>% \n  select(Species, Sepal.Width, Sepal.Length) %>% \n  filter(Sepal.Width >= 3, Species %in% c(\"setosa\", \"virginica\")) %>% \n  mutate(\n    Sepal_Ratio = round(Sepal.Width/Sepal.Length, 4), \n    small_ratio = ifelse(Sepal_Ratio < 0.7, 1, 0)) %>%\n  arrange(Species, desc(Sepal.Length)) %>% \n  head()\n\n  Species Sepal.Width Sepal.Length Sepal_Ratio small_ratio\n1  setosa         4.0          5.8      0.6897           1\n2  setosa         4.4          5.7      0.7719           0\n3  setosa         3.8          5.7      0.6667           1\n4  setosa         4.2          5.5      0.7636           0\n5  setosa         3.5          5.5      0.6364           1\n6  setosa         3.9          5.4      0.7222           0"
  },
  {
    "objectID": "lessons/extra/lesson8_python.html#python",
    "href": "lessons/extra/lesson8_python.html#python",
    "title": "Lesson 8: R vs. Python",
    "section": "Python",
    "text": "Python\n\nimport pandas as pd\nimport numpy as np\n\n\n\n\n\n(iris\n  .filter([\"Species\", \"Sepal.Width\", \"Sepal.Length\"])\n  .query('(`Sepal.Width` >= 3) & (Species in [\"setosa\", \"virginica\"])')\n  .assign(\n    Sepal_Ratio = lambda x: round( x['Sepal.Width'] / x['Sepal.Length'], 4), \n    small_ratio = lambda x: np.where(x['Sepal_Ratio'], 1, 0))\n  .sort_values([\"Species\", \"Sepal.Length\"], ascending = [True, False])\n  .head() )\n\n   Species  Sepal.Width  Sepal.Length  Sepal_Ratio  small_ratio\n14  setosa          4.0           5.8       0.6897            1\n15  setosa          4.4           5.7       0.7719            1\n18  setosa          3.8           5.7       0.6667            1\n33  setosa          4.2           5.5       0.7636            1\n36  setosa          3.5           5.5       0.6364            1"
  },
  {
    "objectID": "lessons/lesson1_intro.html#course-outline",
    "href": "lessons/lesson1_intro.html#course-outline",
    "title": "Lesson 1: Introduction & Installation",
    "section": "Course Outline:",
    "text": "Course Outline:\nThe purpose of R Bootcamp is to be able to read, wrangle, and visualize data using R in RStudio. By the end of the course you will be able to contribute to a society project next semester."
  },
  {
    "objectID": "lessons/lesson1_intro.html#what-is-data-which-kind-of-data-are-we-going-to-use",
    "href": "lessons/lesson1_intro.html#what-is-data-which-kind-of-data-are-we-going-to-use",
    "title": "Lesson 1: Introduction & Installation",
    "section": "What is Data? Which Kind of Data Are We Going to Use?",
    "text": "What is Data? Which Kind of Data Are We Going to Use?\nWe will be working with tabular data (think excel files; rows and columns). Other data includes pictures, videos, and audio."
  },
  {
    "objectID": "lessons/lesson2_readr.html",
    "href": "lessons/lesson2_readr.html",
    "title": "Lesson 2: Reading Data",
    "section": "",
    "text": "Options to See Data:\n\nview(): this opens a new tab to view the data in a spreadsheet style like Excel\nhead(): this returns the top six rows of a dataset, or the “head” of the data"
  },
  {
    "objectID": "lessons/lesson2_readr.html#build-in-datasets",
    "href": "lessons/lesson2_readr.html#build-in-datasets",
    "title": "Lesson 2: Reading Data",
    "section": "Build-in Datasets",
    "text": "Build-in Datasets\nRun this code to see a list of built in datasets:\n\ndata()\n\nThe iris dataset is commonly used and built into R; no additional downloads are necessary.\n\nview(iris)\n\n\nhead(iris)"
  },
  {
    "objectID": "lessons/lesson2_readr.html#reading-data-from-url",
    "href": "lessons/lesson2_readr.html#reading-data-from-url",
    "title": "Lesson 2: Reading Data",
    "section": "Reading Data from URL",
    "text": "Reading Data from URL\nRead in this dataset from this URL: https://raw.githubusercontent.com/saundersg/Statistics-Notebook/master/Data/Rent.csv\n\nhousing_data <- read_csv(\"https://raw.githubusercontent.com/saundersg/Statistics-Notebook/master/Data/Rent.csv\")\n\nhead(housing_data)"
  },
  {
    "objectID": "lessons/lesson2_readr.html#reading-data-from-local-csv-file",
    "href": "lessons/lesson2_readr.html#reading-data-from-local-csv-file",
    "title": "Lesson 2: Reading Data",
    "section": "Reading Data from Local CSV File",
    "text": "Reading Data from Local CSV File\nFirst, let’s make a folder on your computer to use for bootcamp. I suggest putting it in your downloads folder or your documents folder and call it “R Bootcamp”.\nNext, click the “Session” button at the top of RStudio, then “Set Working Directory”, then “Choose Directory” and use your computer’s file directory to navigate to the folder you made for bootcamp.\nThis set your “working directory” which basically makes it easier for us to deal with files.\n\nDownload the datasets.csv document to provide your answers to questions asked in the steps below."
  },
  {
    "objectID": "lessons/lesson3_dplyr.html",
    "href": "lessons/lesson3_dplyr.html",
    "title": "Lesson 3: First Three Wrangling Verbs",
    "section": "",
    "text": "This lesson is focused on the first three wrangling verbs: select(), filter(), and mutate().\nThis will be our starting dataframe used in each of the examples below."
  },
  {
    "objectID": "lessons/lesson3_dplyr.html#selecting-columns",
    "href": "lessons/lesson3_dplyr.html#selecting-columns",
    "title": "Lesson 3: First Three Wrangling Verbs",
    "section": "Selecting Columns",
    "text": "Selecting Columns\nSyntax: select()\nThink of it as selecting check boxes for each column to use. Any selected, whether it’s just one column or whether they’re many columns, will be available once this select() code is completed.\n\n\n\nScenario\nSay we want this dataframe to the right where not all of the columns are needed, only the manufacturer, model, cty, and hwy columns. select() allows us to achieve this.\n\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ncty\nhwy\n\n\n\n\naudi\na4\n18\n29\n\n\naudi\na4\n21\n29\n\n\naudi\na4\n20\n31\n\n\naudi\na4\n21\n30\n\n\naudi\na4\n16\n26\n\n\n\n\n\n\n\n\nCode Solution\n\nmpg %>% \n    select(manufacturer, model, cty, hwy)"
  },
  {
    "objectID": "lessons/lesson3_dplyr.html#filtering-rows",
    "href": "lessons/lesson3_dplyr.html#filtering-rows",
    "title": "Lesson 3: First Three Wrangling Verbs",
    "section": "Filtering Rows",
    "text": "Filtering Rows\nSyntax: filter()\nFiltering is used in the scenarios like, “Only need students that are age 16 years old”, or “Only the the redwood trees in this forest that are taller than 30 ft”.\n\n\n\nScenario\nSay we want this dataframe to the right where the cars are made by ford (manufacturer column) and the amount of highway miles per gallon is greater than 20 (hwy column). filter() allows allows us to achieve this.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\n\n\nford\nmustang\n3.8\n1999\n6\nmanual(m5)\nr\n18\n26\nr\nsubcompact\n\n\nford\nmustang\n3.8\n1999\n6\nauto(l4)\nr\n18\n25\nr\nsubcompact\n\n\nford\nmustang\n4.0\n2008\n6\nmanual(m5)\nr\n17\n26\nr\nsubcompact\n\n\nford\nmustang\n4.0\n2008\n6\nauto(l5)\nr\n16\n24\nr\nsubcompact\n\n\nford\nmustang\n4.6\n1999\n8\nauto(l4)\nr\n15\n21\nr\nsubcompact\n\n\nford\nmustang\n4.6\n1999\n8\nmanual(m5)\nr\n15\n22\nr\nsubcompact\n\n\n\n\n\n\n\n\nCode Solution\n\nmpg %>%\n    filter(manufacturer == \"ford\", hwy > 20)\n\n\n\n\n\n\n\nOperators to use in Filter Statements\n\n\n\n\n\n\n\nBasic Operators:\n> greater than\n< less than\n== equals\n>= greater than or equal to\n<= less than or equal to\n\n\n\nAdvace Operators\n!= is not equal to\n%in% c() is in"
  },
  {
    "objectID": "lessons/lesson3_dplyr.html#making-new-columns",
    "href": "lessons/lesson3_dplyr.html#making-new-columns",
    "title": "Lesson 3: First Three Wrangling Verbs",
    "section": "Making New Columns",
    "text": "Making New Columns\nSyntax: mutate()\nThink of the mutate() verb as starting with one column and change it to where you want it to become–mutating a column. You can make new columns not based on columns, based on one column, or based on multiple columns.\n\n\n\nScenario\nSay we want this dataframe to the right (make sure to scroll to see the other columns) where there was an error in the data and the city miles per gallon needs 5 more miles than what it currently had (cty column) and we need the a column for the engine displacement (displ column) divided by the number of cylinders (cylcolumn). In reality this second task is not a useful but we’re doing it for practice sake.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\nnew_col\n\n\n\n\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n23\n29\np\ncompact\n0.4500000\n\n\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n26\n29\np\ncompact\n0.4500000\n\n\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n25\n31\np\ncompact\n0.5000000\n\n\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n26\n30\np\ncompact\n0.5000000\n\n\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n21\n26\np\ncompact\n0.4666667\n\n\naudi\na4\n2.8\n1999\n6\nmanual(m5)\nf\n23\n26\np\ncompact\n0.4666667\n\n\n\n\n\n\n\n\nCode Solution\n\nmpg %>%\n    mutate(cty = cty + 5, new_col = displ/cyl)"
  },
  {
    "objectID": "lessons/lesson3_dplyr.html#practice-exercises",
    "href": "lessons/lesson3_dplyr.html#practice-exercises",
    "title": "Lesson 3: First Three Wrangling Verbs",
    "section": "Practice Exercises",
    "text": "Practice Exercises\nNew dataset in use for the practices exercises:\n\nlibrary(tidyverse)\ndat <- read_csv(\"https://raw.githubusercontent.com/BrighamEaquinto/brighameaquinto.github.io/master/datasets/insurance.csv\")\n\n\nQuestion 1\nSelect the age, sex, and bmi columns\n\n\n\n\n\nage\nsex\nbmi\n\n\n\n\n19\nfemale\n27.900\n\n\n18\nmale\n33.770\n\n\n28\nmale\n33.000\n\n\n33\nmale\n22.705\n\n\n32\nmale\n28.880\n\n\n31\nfemale\n25.740\n\n\n\n\n\n\n\nCode Solution\ndat %>% \n    select(age, sex, bmi)\n\n\n\n\n\nQuestion 2\nSelect the charges, region, and age columns.\n\n\n\n\n\n\n\n\n\ncharges\nregion\nage\n\n\n\n\n16884.924\nsouthwest\n19\n\n\n1725.552\nsoutheast\n18\n\n\n4449.462\nsoutheast\n28\n\n\n21984.471\nnorthwest\n33\n\n\n3866.855\nnorthwest\n32\n\n\n3756.622\nsoutheast\n31\n\n\n\n\n\n\n\n\n\n\n\nCode Solution\ndat %>% \n    select(charges, region, age)\n\n\n\n\n\nQuestion 3\nFilter the data where sex is only male and region is only northeast.\n\n\n\n\n\nage\nsex\nbmi\nchildren\nsmoker\nregion\ncharges\n\n\n\n\n37\nmale\n29.830\n2\nno\nnortheast\n6406.411\n\n\n25\nmale\n26.220\n0\nno\nnortheast\n2721.321\n\n\n23\nmale\n23.845\n0\nno\nnortheast\n2395.172\n\n\n35\nmale\n36.670\n1\nyes\nnortheast\n39774.276\n\n\n38\nmale\n37.050\n1\nno\nnortheast\n6079.672\n\n\n43\nmale\n27.360\n3\nno\nnortheast\n8606.217\n\n\n\n\n\n\n\nCode Solution\ndat %>% \n    filter(sex == \"male\", region == \"northeast\")\n\n\n\n\n\nQuestion 4\nFilter the data like this:\n\nage is younger than or equal to 40\nbmi is greater than 21\n\n\n\n\n\n\nage\nsex\nbmi\nchildren\nsmoker\nregion\ncharges\n\n\n\n\n19\nfemale\n27.900\n0\nyes\nsouthwest\n16884.924\n\n\n18\nmale\n33.770\n1\nno\nsoutheast\n1725.552\n\n\n28\nmale\n33.000\n3\nno\nsoutheast\n4449.462\n\n\n33\nmale\n22.705\n0\nno\nnorthwest\n21984.471\n\n\n32\nmale\n28.880\n0\nno\nnorthwest\n3866.855\n\n\n31\nfemale\n25.740\n0\nno\nsoutheast\n3756.622\n\n\n\n\n\n\n\nCode Solution\ndat %>% \n    filter(age <= 40, bmi > 21)\n\n\n\n\n\nQuestion 5\nMake a new column called bmi_modified that is the of the bmi - 12\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nage\nsex\nbmi\nchildren\nsmoker\nregion\ncharges\nbmi_modified\n\n\n\n\n19\nfemale\n27.900\n0\nyes\nsouthwest\n16884.924\n15.900\n\n\n18\nmale\n33.770\n1\nno\nsoutheast\n1725.552\n21.770\n\n\n28\nmale\n33.000\n3\nno\nsoutheast\n4449.462\n21.000\n\n\n33\nmale\n22.705\n0\nno\nnorthwest\n21984.471\n10.705\n\n\n32\nmale\n28.880\n0\nno\nnorthwest\n3866.855\n16.880\n\n\n31\nfemale\n25.740\n0\nno\nsoutheast\n3756.622\n13.740\n\n\n\n\n\n\n\nCode Solution\ndat %>% \n    mutate(bmi_modified = bmi - 12) \n\n\n\n\n\nQuestion 6\nMake a new column called age_modified that is the current age divided by 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nage\nsex\nbmi\nchildren\nsmoker\nregion\ncharges\nage_modified\n\n\n\n\n19\nfemale\n27.900\n0\nyes\nsouthwest\n16884.924\n9.5\n\n\n18\nmale\n33.770\n1\nno\nsoutheast\n1725.552\n9.0\n\n\n28\nmale\n33.000\n3\nno\nsoutheast\n4449.462\n14.0\n\n\n33\nmale\n22.705\n0\nno\nnorthwest\n21984.471\n16.5\n\n\n32\nmale\n28.880\n0\nno\nnorthwest\n3866.855\n16.0\n\n\n31\nfemale\n25.740\n0\nno\nsoutheast\n3756.622\n15.5\n\n\n\n\n\n\n\nCode Solution\ndat %>% \n    mutate(age_modified = age/2) \n\n\n\n\n\nQuestion 7: Combining It All Together\n\n\n\nOnly use the age, sex, and charges columns\nMake sure the age column is greater than 50 and there are only females\nMake a new column called real_charges which is the charges times 4\n\n\n\n\n\n\n\n\n\nage\nsex\ncharges\nreal_charges\n\n\n\n\n60\nfemale\n28923.14\n115692.55\n\n\n62\nfemale\n27808.73\n111234.90\n\n\n56\nfemale\n11090.72\n44362.87\n\n\n52\nfemale\n10797.34\n43189.34\n\n\n60\nfemale\n13228.85\n52915.39\n\n\n59\nfemale\n14001.13\n56004.54\n\n\n\n\n\n\n\n\n\nCode Solution\ndat %>% \n    select(age, sex, charges) %>% \n    filter(age > 50, sex == \"female\") %>% \n    mutate(real_charges = charges * 4)"
  },
  {
    "objectID": "lessons/lesson4_dplyr.html",
    "href": "lessons/lesson4_dplyr.html",
    "title": "Lesson 4: Last Three Wrangling Verbs",
    "section": "",
    "text": "Before we do any exercises, make sure to run this code:\nThis is our dataset for this practice:"
  },
  {
    "objectID": "lessons/lesson4_dplyr.html#lets-learn-about-group_by-summarise",
    "href": "lessons/lesson4_dplyr.html#lets-learn-about-group_by-summarise",
    "title": "Lesson 4: Last Three Wrangling Verbs",
    "section": "Let’s learn about group_by() & summarise()",
    "text": "Let’s learn about group_by() & summarise()\nWhat if we want to learn:\n\nthe average BMI by gender\nthe total sum of charges by region in the US\nmin & max of children by  age\n\nAll of these are examples uses for group_by() and summarise() statements."
  },
  {
    "objectID": "lessons/lesson4_dplyr.html#examples-1-average-bmi-by-gender",
    "href": "lessons/lesson4_dplyr.html#examples-1-average-bmi-by-gender",
    "title": "Lesson 4: Last Three Wrangling Verbs",
    "section": "Examples 1: Average BMI by Gender",
    "text": "Examples 1: Average BMI by Gender\n\ndat %>% \n    group_by(sex) %>%\n    summarise(Average_Age = mean(age)) \n\n\n\n\n\nsex\nAverage_Age\n\n\n\n\nfemale\n39.50302\n\n\nmale\n38.91716"
  },
  {
    "objectID": "lessons/lesson4_dplyr.html#examples-2-average-bmi-by-age",
    "href": "lessons/lesson4_dplyr.html#examples-2-average-bmi-by-age",
    "title": "Lesson 4: Last Three Wrangling Verbs",
    "section": "Examples 2: Average BMI by Age",
    "text": "Examples 2: Average BMI by Age\n\ndat %>% \n    group_by(age) %>% \n    summarise(mean(bmi)) %>% \n    head() \n\n\n\n\n\nage\nmean(bmi)\n\n\n\n\n18\n31.32616\n\n\n19\n28.59691\n\n\n20\n30.63276\n\n\n21\n28.18571\n\n\n22\n31.08768\n\n\n23\n31.45446"
  },
  {
    "objectID": "lessons/lesson4_dplyr.html#exercise-1-sum-of-charges-by-region",
    "href": "lessons/lesson4_dplyr.html#exercise-1-sum-of-charges-by-region",
    "title": "Lesson 4: Last Three Wrangling Verbs",
    "section": "Exercise 1: Sum of Charges by Region",
    "text": "Exercise 1: Sum of Charges by Region\nUse the code below to get you started. Find the sum of the charges by region.\nStarter Code:\n\ndat %>% \n    group_by(______) %>% \n    summarise(_____________ = ___(_______))\n\nAttempt the code above then use this dropdown for help\n\n\nAnswer\ndat %>% \n    group_by(region) %>% \n    summarise(Total_Charges = sum(charges))\n\n\nThis is the correct output:\n\n\n\n\nregion\nTotal_Charges\n\n\n\n\nnortheast\n4343669\n\n\nnorthwest\n4035712\n\n\nsoutheast\n5363690\n\n\nsouthwest\n4012755"
  },
  {
    "objectID": "lessons/lesson4_dplyr.html#exercise-2-min-max-of-children-by-age",
    "href": "lessons/lesson4_dplyr.html#exercise-2-min-max-of-children-by-age",
    "title": "Lesson 4: Last Three Wrangling Verbs",
    "section": "Exercise 2: Min & Max of Children by Age",
    "text": "Exercise 2: Min & Max of Children by Age\nUse the code below to get you started. Find the minimum and maximum amount of children by age.\nStarter Code:\n\ndat %>% \n    group_by(___) %>%\n    summarise(\n        Min = ___(________),\n        Max = ___(________)\n        ) %>% \n    head()\n\n\n\nAnswer\ndat %>% \n    group_by(age) %>%\n    summarise(\n        Min = min(children),\n        Max = max(children)\n        ) %>% \n    head() \n\n\nThis is the correct output:\n\n\n\n\nage\nMin\nMax\n\n\n\n\n18\n0\n4\n\n\n19\n0\n5\n\n\n20\n0\n5\n\n\n21\n0\n4"
  },
  {
    "objectID": "lessons/lesson4_dplyr.html#exercise-3-average-charges-by-sex-and-by-smoker",
    "href": "lessons/lesson4_dplyr.html#exercise-3-average-charges-by-sex-and-by-smoker",
    "title": "Lesson 4: Last Three Wrangling Verbs",
    "section": "Exercise 3: Average Charges by Sex and by Smoker",
    "text": "Exercise 3: Average Charges by Sex and by Smoker\nHere no starter code is given. If you need to, look back at previous code chunks for guidence.\nTry as best as possible to mimic the results below.\nOnly use the dropdown answer when you’ve tried as much as possible.\n\n\nAnswer\ndat %>% \n    group_by(sex, smoker) %>% \n    summarise(\n        Average_Charges = mean(charges), \n        Total_Charges = sum(charges)) \n\n\nThis is the correct output:\n\n\n\n\nsex\nsmoker\nAverage_Charges\nTotal_Charges\n\n\n\n\nfemale\nno\n8762.297\n4792977\n\n\nfemale\nyes\n30678.996\n3528085\n\n\nmale\nno\n8087.205\n4181085\n\n\nmale\nyes\n33042.006\n5253679"
  },
  {
    "objectID": "lessons/lesson4_dplyr.html#exercise-4-storm-dataset---wind-and-air-pressure",
    "href": "lessons/lesson4_dplyr.html#exercise-4-storm-dataset---wind-and-air-pressure",
    "title": "Lesson 4: Last Three Wrangling Verbs",
    "section": "Exercise 4: Storm Dataset - Wind and Air Pressure",
    "text": "Exercise 4: Storm Dataset - Wind and Air Pressure\nThis dataset is bult into R so you already have it. It is called storms. This is a new dataset so you may want to either view() it or use the head() method on it.\nFind the average and standard deviation of the wind speed and air pressure by storm category.\n\n\nAnswer\nstorms %>% \n    group_by(category) %>% \n    summarise(\n        mean(wind),\n        sd(wind), \n        mean(pressure), \n        sd(pressure)\n        ) %>% knitr::kable()\n\n\nThis is the correct output:\n\n\n\n\ncategory\nmean(wind)\nsd(wind)\nmean(pressure)\nsd(pressure)\n\n\n\n\n-1\n27.49482\n3.702448\n1007.5390\n3.900209\n\n\n0\n45.66392\n8.231625\n999.2910\n6.837831\n\n\n1\n70.95140\n5.454009\n981.1887\n9.125784\n\n\n2\n89.41923\n3.873391\n966.9359\n9.018024\n\n\n3\n104.48157\n4.246545\n953.9124\n9.168259\n\n\n4\n122.10462\n6.383000\n939.3942\n9.788015\n\n\n5\n145.58140\n5.862072\n917.4070\n12.732892"
  },
  {
    "objectID": "lessons/lesson4_dplyr.html#exercise-5-summarizing-by-month",
    "href": "lessons/lesson4_dplyr.html#exercise-5-summarizing-by-month",
    "title": "Lesson 4: Last Three Wrangling Verbs",
    "section": "Exercise 5: Summarizing by Month",
    "text": "Exercise 5: Summarizing by Month\nFind the mean, median, and standard deviation of wind speed by month.\nOnly use the dropdown answer when you’ve tried as much as possible.\n\n\nAnswer\nstorms %>% \n    group_by(month) %>% \n    summarise(\n        Mean_Wind = mean(wind), \n        Median = median(wind), \n        St_Dev = sd(wind)\n        ) \n\n\nThis is the correct output:\n\n\n\n\nmonth\nMean_Wind\nMedian\nSt_Dev\n\n\n\n\n1\n50.33333\n50\n12.312969\n\n\n4\n44.61538\n45\n5.937711\n\n\n5\n36.27778\n35\n9.011887\n\n\n6\n37.55348\n35\n12.676257\n\n\n7\n41.74973\n40\n18.711162\n\n\n8\n51.75471\n45\n25.584917\n\n\n9\n57.54597\n50\n28.192273\n\n\n10\n56.49272\n50\n25.795906\n\n\n11\n53.30986\n50\n22.702523\n\n\n12\n47.88000\n45\n14.608659"
  },
  {
    "objectID": "lessons/lesson4_dplyr.html#exercise-6-airquality-dataset---summarising-by-month",
    "href": "lessons/lesson4_dplyr.html#exercise-6-airquality-dataset---summarising-by-month",
    "title": "Lesson 4: Last Three Wrangling Verbs",
    "section": "Exercise 6: Airquality Dataset - Summarising by Month",
    "text": "Exercise 6: Airquality Dataset - Summarising by Month\nThis example is very similar to the previous example. This is a new datset and hopefully doing the same thing with another dataset will solidify the concept.\nThis dataset is bult into R so you already have it. It is called airquality. This is a new dataset so you may want to either view() it or use the head() method on it.\n\n\nAnswer\nairquality %>% \n    group_by(Month) %>% \n    summarise(\n        Mean_Wind = mean(Wind), \n        Median = median(Wind), \n        St_Dev = sd(Wind)\n        ) \n\n\nThis is the correct output:\n\n\n\n\nMonth\nMean_Wind\nMedian\nSt_Dev\n\n\n\n\n5\n11.622581\n11.5\n3.531450\n\n\n6\n10.266667\n9.7\n3.769234\n\n\n7\n8.941935\n8.6\n3.035981\n\n\n8\n8.793548\n8.6\n3.225930\n\n\n9\n10.180000\n10.3\n3.461254"
  },
  {
    "objectID": "lessons/lesson5_ggplot.html",
    "href": "lessons/lesson5_ggplot.html",
    "title": "Lesson 5: Graphing Part 1",
    "section": "",
    "text": "Data Used in examples below\nlibrary(tidyverse)\n\ndat <- read_csv(\"https://raw.githubusercontent.com/BrighamEaquinto/brighameaquinto.github.io/master/datasets/insurance.csv\")\nThe four main plots we will go over today:\nWhat kinds of data do we have? In general, we have:"
  },
  {
    "objectID": "lessons/lesson5_ggplot.html#histogram-counting-the-number-of-numeric-occurances",
    "href": "lessons/lesson5_ggplot.html#histogram-counting-the-number-of-numeric-occurances",
    "title": "Lesson 5: Graphing Part 1",
    "section": "Histogram: Counting the Number of Numeric Occurances",
    "text": "Histogram: Counting the Number of Numeric Occurances\n\nX: Numeric, Y: N/A\n\n\nCode\nggplot(dat, aes(x=bmi))+ \n   geom_histogram(bins = 50)+\n    labs(\n        title=\"Y-Axis Auto Counts the\\n Occurances of Each Number\",\n        x=\"Numeric Column: 'bmi'\")+\n    theme(axis.title = element_text(face=\"bold\"))"
  },
  {
    "objectID": "lessons/lesson5_ggplot.html#bar-plot-counting-the-number-of-categorical-occurances",
    "href": "lessons/lesson5_ggplot.html#bar-plot-counting-the-number-of-categorical-occurances",
    "title": "Lesson 5: Graphing Part 1",
    "section": "Bar Plot: Counting the Number of Categorical Occurances",
    "text": "Bar Plot: Counting the Number of Categorical Occurances\n\nMethod 1: geom_bar()Method 2: geom_col()\n\n\n\nX: Categorical, Y: Auto Counts Categories\n\n\nCode\nggplot(dat, aes(x=region))+\n    geom_bar()+\n    labs(\n        title=\"\", \n        x=\"Categorical Column: 'region'\", \n        y=\"Auto Counts the Occurances\\n of Each Category\")+\n    theme(axis.title = element_text(face=\"bold\"))\n\n\n\n\n\n\n\n\n\nX: Categorical, Y: Numeric\n\n\nCode\nplot_data <- dat %>% \n    group_by(region) %>% \n    summarise(count = n()) \n\nggplot(plot_data, aes(x=region, y=count))+\n    geom_col()+\n    labs(\n        title=\"\", \n        x=\"Categorical Column: 'region'\", \n        y=\"Numeric Column: 'count'\")+\n    theme(axis.title = element_text(face=\"bold\"))"
  },
  {
    "objectID": "lessons/lesson5_ggplot.html#boxplot",
    "href": "lessons/lesson5_ggplot.html#boxplot",
    "title": "Lesson 5: Graphing Part 1",
    "section": "Boxplot",
    "text": "Boxplot\n\nX: Categorical, Y: Numeric\n\n\nCode\nggplot(dat, aes(x=region, y=bmi))+\n    geom_boxplot()+\n    labs(x=\"Categorical Column: 'region'\", y=\"Numeric Column: 'bmi'\")+\n    theme(axis.title = element_text(face=\"bold\"))"
  },
  {
    "objectID": "lessons/lesson5_ggplot.html#scatterplot",
    "href": "lessons/lesson5_ggplot.html#scatterplot",
    "title": "Lesson 5: Graphing Part 1",
    "section": "Scatterplot",
    "text": "Scatterplot\n\nX: Numeric, Y: Numeric\n\n\nCode\nggplot(dat, aes(x=age, y=bmi))+\n    geom_point()+\n    labs(x=\"Numeric Column: 'Age'\", y=\"Numeric Column: 'bmi'\")+\n    theme(axis.title = element_text(face=\"bold\"))"
  },
  {
    "objectID": "lessons/lesson5_ggplot.html#exercise-1-visualizing-a-distribution-using-a-histogram",
    "href": "lessons/lesson5_ggplot.html#exercise-1-visualizing-a-distribution-using-a-histogram",
    "title": "Lesson 5: Graphing Part 1",
    "section": "Exercise 1: Visualizing a Distribution using a Histogram",
    "text": "Exercise 1: Visualizing a Distribution using a Histogram\nPrompt: Show the distribution of math scores\nInstructions:\n\nuse the dataset from above called bob\nuse the `math score` column and make sure it is wrapped in tick marks. This is necessary when column names contain spaces.\nuse geom_histogram() on line 2\n\nStarter Code:\n\nggplot(data = ___, aes(x = `____ _____`))+ \n    geom____________\n\n\n\n\n\n\nAnswer:\n\n\nCode Solution\nggplot(data = bob, aes(x = `math score`))+ \n    geom_histogram()"
  },
  {
    "objectID": "lessons/lesson5_ggplot.html#exercise-2-visualizing-counts-of-school-degrees",
    "href": "lessons/lesson5_ggplot.html#exercise-2-visualizing-counts-of-school-degrees",
    "title": "Lesson 5: Graphing Part 1",
    "section": "Exercise 2: Visualizing Counts of School Degrees",
    "text": "Exercise 2: Visualizing Counts of School Degrees\nPrompt: Make a bar chart visualizing the count of school degrees\nInstructions:\n\nuse the dataset from above called bob\nuse parent_education column as the x axis\nuse geom_bar() in line 2\n\nStarter Code:\n\nggplot(data = ___, aes(x = ________________))+ \n    geom____________\n\n\n\n\n\n\nAnswer:\n\n\nCode Solution\nggplot(data = bob, aes(x = parent_education))+\n    geom_bar()"
  },
  {
    "objectID": "lessons/lesson5_ggplot.html#exercise-3-scatter-plot-to-visualize-test-scores",
    "href": "lessons/lesson5_ggplot.html#exercise-3-scatter-plot-to-visualize-test-scores",
    "title": "Lesson 5: Graphing Part 1",
    "section": "Exercise 3: Scatter Plot to Visualize Test Scores",
    "text": "Exercise 3: Scatter Plot to Visualize Test Scores\nPrompt: Make a scatter plot visualizing the correlation of reading scores and writing scores\nInstructions:\n\nuse the dataset from above called bob\nuse the `reading score` column as the x axis\nuse the `writing score` column as the y axis\nuse the gender column as the color\nuse geom_point() in line 2\n\nStarter Code:\n\nggplot(data = ___, aes(x = `_______ _____`, y = _______________, color = ______))+\n    geom________\n\n\n\n\n\n\nAnswer:\n\n\nCode Solution\nggplot(data = bob, aes(x = `reading score`, y = `writing score`, color = gender))+\n    geom_point()"
  },
  {
    "objectID": "lessons/lesson5_ggplot.html#exercise-4-visualizing-distribution-using-boxplots",
    "href": "lessons/lesson5_ggplot.html#exercise-4-visualizing-distribution-using-boxplots",
    "title": "Lesson 5: Graphing Part 1",
    "section": "Exercise 4: Visualizing Distribution using Boxplots",
    "text": "Exercise 4: Visualizing Distribution using Boxplots\nPrompt: Make a scatter plot visualizing the correlation of reading scores and writing scores\nInstructions:\n\nuse the dataset from above called bob\nuse the lunch column as the x axis\nuse the `math score` column as the y axis\nuse geom_histogram() in line 2\n\nStarter Code:\n\nggplot(___, aes(_____, ____________))+ \n    geom__________\n\nNotice in the starter code we didn’t specify data, x, and y. ggplot doesn’t require explicitly specifying the arguments for data, x-axis, and y-axis. Those are implied by their position in the code below. This way of writing code require less typing and is very common.\n\n\n\n\n\nAnswer:\n\n\nCode Solution\nggplot(bob, aes(lunch, `math score`))+ \n    geom_boxplot()\n\n\n\nFor the remainder of the exercises, no starter code is provided. Look back at previous exercises for help if needed."
  },
  {
    "objectID": "lessons/lesson5_ggplot.html#exercise-5-bar-chart",
    "href": "lessons/lesson5_ggplot.html#exercise-5-bar-chart",
    "title": "Lesson 5: Graphing Part 1",
    "section": "Exercise 5: Bar Chart",
    "text": "Exercise 5: Bar Chart\nPrompt: Make a bar chart visualizing the types of lunches\nInstructions:\n\nRemake the plot below\n\n\n\n\n\n\nAnswer:\n\n\nCode Solution\nggplot(data = bob, aes(x = lunch, fill = gender))+\n    geom_bar()"
  },
  {
    "objectID": "lessons/lesson5_ggplot.html#exercise-6-scatter-plot",
    "href": "lessons/lesson5_ggplot.html#exercise-6-scatter-plot",
    "title": "Lesson 5: Graphing Part 1",
    "section": "Exercise 6: Scatter Plot",
    "text": "Exercise 6: Scatter Plot\nPrompt: Using the iris dataset (which is built into R and ready to use) make the scatter plot below. Look at the x-axis, y-axis, and legend for the columns to use.\nInstructions:\n\nRemake the plot below\n\n\n\n\n\n\nAnswer:\n\n\nCode Solution\nggplot(iris, aes(Petal.Width, Petal.Length, color = Species))+\n    geom_point()"
  },
  {
    "objectID": "lessons/lesson5_ggplot.html#exercise-7-boxplot",
    "href": "lessons/lesson5_ggplot.html#exercise-7-boxplot",
    "title": "Lesson 5: Graphing Part 1",
    "section": "Exercise 7: Boxplot",
    "text": "Exercise 7: Boxplot\nPrompt: Using the iris dataset (which is built into R and ready to use) make the boxplot below. Look at the x-axis, y-axis, and legend for the columns to use.\nInstructions:\n\nRemake the plot below\n\n\n\n\n\n\nAnswer:\n\n\nCode Solution\nggplot(iris, aes(Species, Petal.Width, fill = Species))+ \n    geom_boxplot()"
  },
  {
    "objectID": "lessons/lesson5_ggplot.html#exercise-8",
    "href": "lessons/lesson5_ggplot.html#exercise-8",
    "title": "Lesson 5: Graphing Part 1",
    "section": "Exercise 8:",
    "text": "Exercise 8:\nPrompt: Using the iris dataset (which is built into R and ready to use) make the histogram below. Look at the x-axis, y-axis, and legend for the columns to use.\nInstructions:\n\nRemake the plot below\n\n\n\n\n\n\nAnswer:\n\n\nCode Solution\nggplot(iris, aes(Petal.Length, fill = Species))+\n    geom_histogram()"
  },
  {
    "objectID": "lessons/lesson6_ggplot.html",
    "href": "lessons/lesson6_ggplot.html",
    "title": "Lesson 6: Graphing Part 2",
    "section": "",
    "text": "library(tidyverse)\n\ndat <- read_csv(\"https://raw.githubusercontent.com/BrighamEaquinto/brighameaquinto.github.io/master/datasets/insurance.csv\")"
  },
  {
    "objectID": "lessons/lesson6_ggplot.html#labeling",
    "href": "lessons/lesson6_ggplot.html#labeling",
    "title": "Lesson 6: Graphing Part 2",
    "section": "Labeling",
    "text": "Labeling\n\nlabs()\nExplanation\nThe labs() function is used to add label to the plot like the x-axis, the y-axis, and title.\nOptions:\n\ntitle\nsubtitle\n\ncaption\nx\ny\n\nExample\n\n\nCode\nggplot(dat, aes(x = region, fill = sex))+\n    geom_bar()+ \n    labs(title = \"Counts of Regions\", x = \"Regions\", y = \"Amount\", fill = \"Sex\")+ \n    theme_bw()"
  },
  {
    "objectID": "lessons/lesson6_ggplot.html#faceting",
    "href": "lessons/lesson6_ggplot.html#faceting",
    "title": "Lesson 6: Graphing Part 2",
    "section": "Faceting",
    "text": "Faceting\n\nfacet_wrap() & facet_grid()\nThis of faceting as a third variable.\n\nfacet_wrap()\n\n\n\n\n\n\n\n\nCode\nggplot(dat, aes(x = region, fill = sex))+\n            geom_bar()+ \n            facet_wrap(~sex)+\n            labs(title = \"Faceted Graph\", x = \"\", y = \"Amount\", fill = \"Sex\")+\n            theme(\n                title = element_text(size = 20), \n                axis.title = element_text(size = 10), \n                legend.title = element_text(size = 10), \n                legend.position = \"none\")"
  },
  {
    "objectID": "lessons/lesson6_ggplot.html#themes",
    "href": "lessons/lesson6_ggplot.html#themes",
    "title": "Lesson 6: Graphing Part 2",
    "section": "Themes",
    "text": "Themes\nThe following theme options affect all the non-data aspects\n\n+ theme_bw()\n+ theme_linedraw()\n+ theme_light()\n+ theme_dark()\n+ theme_minimal()\n+ theme_classic()\n+ theme_void()\n+ theme_test()"
  },
  {
    "objectID": "lessons/lesson6_ggplot.html#coloring",
    "href": "lessons/lesson6_ggplot.html#coloring",
    "title": "Lesson 6: Graphing Part 2",
    "section": "Coloring",
    "text": "Coloring\n\nAesthetic\nIt is possible to set colors dynamically based on column of data or to set it as a static color.\n\nfill and color inside aesthetic to a column of data\nfill and color outside aesthetic to a static color\n\nSetting colors dynamically and statically.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMore Examples for Better Understanding\n\n\n\n\n\n\n\n\nCase 1\ngeom_bar(aes(x = Petal.Length), fill = \"orange\")\n\nfill is set to ‘orange’ outside the aesthetic\ncolor is not used\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCase 2\ngeom_bar(aes(x = Petal.Length), color = \"black\")\n\nfill is not used\ncolor is set to ‘black’ outside the aesthetic\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCase 3\ngeom_bar(aes(x = Petal.Length), fill = \"orange\", color = \"black\")\n\nfill is set to ‘orange’ outside of the aesthetic\ncolor is set to ‘black’ outside of the aesthetic\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCase 4\nYou can do a combination of inside and outside of the aesthetic.\ngeom_bar(aes(x = Petal.Length, fill = Species), color = \"black\")\n\nfill is set to ‘orange’ inside of the aesthetic\ncolor is set to Species outside of the aesthetic. Notice this is a column in the dataset, not a static color."
  },
  {
    "objectID": "lessons/lesson6_ggplot.html#scales",
    "href": "lessons/lesson6_ggplot.html#scales",
    "title": "Lesson 6: Graphing Part 2",
    "section": "Scales",
    "text": "Scales\n\n\nCode\nggplot(iris, aes(Petal.Width, Petal.Length, color = Species))+\n  geom_point()+\n  scale_x_continuous(breaks = seq(0, 4, 1))+\n  scale_y_continuous(breaks = seq(0,10,1))\n\nggplot(mpg, aes(class, fill = class))+\n  geom_bar()+\n  # scale_x_discrete(limits = c(\"2seater\"))\n  scale_fill_manual(values = c(\"blue\", \"blue\", \"blue\", \"blue\", \"blue\", \"blue\", \"red\"))\n\n# scale_x_continuous(\n#   breaks = seq(15, 40, by = 5), \n#   labels = , \n#   limits = \n#   )\n\n# scale_colour_brewer(palette = \"Set1\")\n\n# scale_colour_manual(values = c(Republican = \"red\", Democratic = \"blue\"))"
  },
  {
    "objectID": "other/Reading Data/reading_data.html",
    "href": "other/Reading Data/reading_data.html",
    "title": "Reading Data",
    "section": "",
    "text": "The readr package is the first package that we will learn about. This allows us to read in rectangular data like cvs files.\nThis is the typical way it goes when you have data located on your computer.\n\nlibrary(tidyverse)\n\ndataset <- read_csv(file_path)\n\nhead(dataset)\n\nCopy the file path from your computer and paste it in the function. One downside to this is you have to manually replace each backslash \\ with a forwardslash /\nHere is an example:\n\nlibrary(tidyverse)\n\nbob <- read_csv(\"C:/Users/Bethany/Downloads/US_Population_200_Years.csv\")\n\nhead(bob)\n\n# A tibble: 6 × 7\n   Rank City             Population  Year PopDate    Longitude Latitude\n  <dbl> <chr>                 <dbl> <dbl> <chr>          <dbl>    <dbl>\n1     1 New York, NY          33131  1790 06/01/1790     -73.9     40.7\n2     2 Philadelphia, PA      44096  1790 06/01/1790     -75.1     40.0\n3     3 Boston, MA            18320  1790 06/01/1790     -71.1     42.3\n4     4 Charleston, SC        16359  1790 06/01/1790     -80.0     32.8\n5     5 Baltimore, MD         13503  1790 06/01/1790     -76.6     39.3\n6     7 Salem, MA              7921  1790 06/01/1790     -70.9     42.5"
  },
  {
    "objectID": "other/Reading Data/reading_data.html#method-2-import-dataset-button-option",
    "href": "other/Reading Data/reading_data.html#method-2-import-dataset-button-option",
    "title": "Reading Data",
    "section": "Method 2: “Import Dataset” Button Option",
    "text": "Method 2: “Import Dataset” Button Option\nAnother option is to use the “Import Dataset” button in the environment pane of RStudio.\n\n\nThe data will now be in your environment."
  },
  {
    "objectID": "other/Reading Data/reading_data.html#method-3-getting-data-from-a-url",
    "href": "other/Reading Data/reading_data.html#method-3-getting-data-from-a-url",
    "title": "Reading Data",
    "section": "Method 3: Getting data from a URL",
    "text": "Method 3: Getting data from a URL\nOften you get your data from online somewhere like GitHub or Kaggle. While there is the option to download the file, then read it from your computer locally, like we just did above, there’s also the option to read in data from a URL.\nA benefit is that less memory is used on your computer. Another is that you can send your analysis with the data being read in from a URL, and others will be able to run the script without any data issues.\nBelow is an example.\n\nlibrary(tidyverse)\n\ndata1 <- read_csv(\"https://raw.githubusercontent.com/saundersg/Statistics-Notebook/master/Data/Rent.csv\")\n\nhead(data1)"
  }
]