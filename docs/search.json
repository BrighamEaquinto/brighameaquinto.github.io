[
  {
    "objectID": "main.html",
    "href": "main.html",
    "title": "R Bootcamp",
    "section": "",
    "text": "Lesson 1: Introduction to Data Science & Installation\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\nLesson 2: Reading Data\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\nLesson 3: Wangling Data: First Three Verbs\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\nLesson 4: Wrangling Data: Last 3 Verbs\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nLesson 5: Graphing Part 1\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\nLesson 6: Graphing Part 2\n\n\n\n\n\n\n\n \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "other/Installation/installation.html",
    "href": "other/Installation/installation.html",
    "title": "Installation",
    "section": "",
    "text": "Insert video here\n\n\nFirst Option:\nGoogle “download R” or go to this link to download it. The page should look like this.\nSecond Option:\nUse this direct R download\n\n\n\nFirst Option:\nGoogle “download RStudio” or go to this link to download it. The page should look like this.\nSecond Option:\nUse this direct RStudio download"
  },
  {
    "objectID": "other/Reading Data/reading_data.html",
    "href": "other/Reading Data/reading_data.html",
    "title": "Reading Data",
    "section": "",
    "text": "The readr package is the first package that we will learn about. This allows us to read in rectangular data like cvs files.\nThis is the typical way it goes when you have data located on your computer.\n\nlibrary(tidyverse)\n\ndataset <- read_csv(file_path)\n\nhead(dataset)\n\nCopy the file path from your computer and paste it in the function. One downside to this is you have to manually replace each backslash \\ with a forwardslash /\nHere is an example:\n\nlibrary(tidyverse)\n\nbob <- read_csv(\"C:/Users/Bethany/Downloads/US_Population_200_Years.csv\")\n\nhead(bob)\n\n# A tibble: 6 × 7\n   Rank City             Population  Year PopDate    Longitude Latitude\n  <dbl> <chr>                 <dbl> <dbl> <chr>          <dbl>    <dbl>\n1     1 New York, NY          33131  1790 06/01/1790     -73.9     40.7\n2     2 Philadelphia, PA      44096  1790 06/01/1790     -75.1     40.0\n3     3 Boston, MA            18320  1790 06/01/1790     -71.1     42.3\n4     4 Charleston, SC        16359  1790 06/01/1790     -80.0     32.8\n5     5 Baltimore, MD         13503  1790 06/01/1790     -76.6     39.3\n6     7 Salem, MA              7921  1790 06/01/1790     -70.9     42.5"
  },
  {
    "objectID": "other/Reading Data/reading_data.html#method-2-import-dataset-button-option",
    "href": "other/Reading Data/reading_data.html#method-2-import-dataset-button-option",
    "title": "Reading Data",
    "section": "Method 2: “Import Dataset” Button Option",
    "text": "Method 2: “Import Dataset” Button Option\nAnother option is to use the “Import Dataset” button in the environment pane of RStudio.\n\n\nThe data will now be in your environment."
  },
  {
    "objectID": "other/Reading Data/reading_data.html#method-3-getting-data-from-a-url",
    "href": "other/Reading Data/reading_data.html#method-3-getting-data-from-a-url",
    "title": "Reading Data",
    "section": "Method 3: Getting data from a URL",
    "text": "Method 3: Getting data from a URL\nOften you get your data from online somewhere like GitHub or Kaggle. While there is the option to download the file, then read it from your computer locally, like we just did above, there’s also the option to read in data from a URL.\nA benefit is that less memory is used on your computer. Another is that you can send your analysis with the data being read in from a URL, and others will be able to run the script without any data issues.\nBelow is an example.\n\nlibrary(tidyverse)\n\ndata1 <- read_csv(\"https://raw.githubusercontent.com/saundersg/Statistics-Notebook/master/Data/Rent.csv\")\n\nhead(data1)"
  },
  {
    "objectID": "other/Reading Data/reading_data.html#other-data-file-formats",
    "href": "other/Reading Data/reading_data.html#other-data-file-formats",
    "title": "Reading Data",
    "section": "Other Data File Formats",
    "text": "Other Data File Formats\nWhat if the dataset you have is not a csv? What if it’s an excel file or the often unused tsc?\nOther options include:\n\nread_excel() to read excel files like xls or xlsx\nread_tsv() to read tsv files (tab separated files)\nread_rds() to read RDS files (a data export option from SQLServer)"
  },
  {
    "objectID": "other/Reading Data/reading_data.html#exceptions-to-the-norm",
    "href": "other/Reading Data/reading_data.html#exceptions-to-the-norm",
    "title": "Reading Data",
    "section": "Exceptions to the Norm",
    "text": "Exceptions to the Norm\nFor most cases this is the way to read in data. There are some examples of variations.\nSometimes the column headers are not the top row of the data. In this scenario, use the option skip = 1 if there is one extra row above the headers.\nSometimes there are not column name at all and we’ll have to give them to the dataset. How can we do this?"
  },
  {
    "objectID": "other/Reading Data/reading_data.html#writing-files",
    "href": "other/Reading Data/reading_data.html#writing-files",
    "title": "Reading Data",
    "section": "Writing Files",
    "text": "Writing Files\nWith readr, we can write data files.\n\nwrite_csv(dataset_to_save, \"file_name.csv\")"
  },
  {
    "objectID": "other/Visualize Data/visualizing_data.html",
    "href": "other/Visualize Data/visualizing_data.html",
    "title": "Visualize Data",
    "section": "",
    "text": "#ggplot"
  },
  {
    "objectID": "other/welcome/welcome.html",
    "href": "other/welcome/welcome.html",
    "title": "Welcome to Bootcamp",
    "section": "",
    "text": "Welcome to Data Science Society’s R Bootcamp"
  },
  {
    "objectID": "other/welcome/welcome.html#course-outline",
    "href": "other/welcome/welcome.html#course-outline",
    "title": "Welcome to Bootcamp",
    "section": "Course Outline:",
    "text": "Course Outline:\nThe purpose of R Bootcamp is to be able to read, wrangle, and visualize data using R in RStudio. By the end of the course you will be able to contribute to a society project next semester.\n\nReading Data: readr package\n\nnavigating file systems\ncopy file paths\nRStudio’s “Import Dataset” button, “From Text (readr)” option\n\n\n\nWrangling Data: dplyr/tidyr packages\nPrimary Focus: select, filter, mutate, groupby/summarise, and arrange.\nSecondary Focus: joining, pivoting, case_when,\nOther: drop_na(), replace_na(),\n\n\nVisualizing Data: ggplot2 package\n\nWhat kind of data these plot plot\ncode for each\nhistograms, boxplots, scatterplots, bar charts.\n\nIn Terms of Packages:\n\nreadr\ndplyr/tidyr\nggplot\n\nOthers:\n\nforcats (fct_reorder and working with factors)\nstringr (working with text data)\nlubridate (working with dates)\ntibble (just the tibble() function)\npurr (mappings, boring)"
  },
  {
    "objectID": "other/welcome/welcome.html#what-kind-of-data-are-we-using",
    "href": "other/welcome/welcome.html#what-kind-of-data-are-we-using",
    "title": "Welcome to Bootcamp",
    "section": "What kind of data are we using?",
    "text": "What kind of data are we using?\nWe will mainly be using the _____ and the ____ datasets for practice.\nWhat is data? Is it singular or plural?\nWhat other types of data are there? Take this for example ____\nWe will be working with tabular data. Other data includes pictures, videos, and audio.\nThere are different types of data, we won’t get into the nitty-gritty parts of it, but there is structured, semi-structured, and ustructured data. We will be playing around with structured data (think excel files). Examples of the other types of data are pictures, video, and audio files.\n\nreadr: for data import\ndplyr: for data manipulation\ntidyr: for data tidying\nggplot2: for data visualisation\ntibble: for tibbles, a modern re-imagining of data frames\nstringr: for strings\nforcats: for factors\npurrr: for functional programming\n+\nlubridate: for dates"
  },
  {
    "objectID": "other/Wrangling Data/wrangling_data.html",
    "href": "other/Wrangling Data/wrangling_data.html",
    "title": "Wrangling Data",
    "section": "",
    "text": "Base R is the native tools that R has to deal with data. The syntax is outdated and better tools are available to use.\nThe syntax to work in Base R is very similar to native python syntax. The biggest downside is that it’s not possible to chain operations together like selecting columns and filtering data. You would to constantly assign and reassign variables which results in very messy and unreadable code.\nIf you use this, I will turn in my grave. Please don’t make your life more difficult, use the Tidyverse.\nBase R is native to R; no additional installations are required.\n\n\n\n\nThe Tidyverse allows chainable actions like this:\n\nnew_dataset <- dataset %>% \n    select() %>%\n    filter() %>% \n    mutate() %>% \n    group_by() %>% \n    summarise() %>%\n    arrange()\n\nRun this code in the console to download the tidyverse\n\ninstall.packages(\"tidyverse\")\n\nIn order to be able to use this package, put this code at the top of your R Script or RMD file\n\nlibrary(tidyverse)\n\n\n\n\n\n\n\n\n\n\n\ndf$column_name\ndf[[]]\n\n\n\n\n\ndf %>% select(column1, column2)\n\n\n\n\n\n\n\n\n\n\n\ndf$profit <- df$revenue - df$cost\n\n\n\n\n\ndf %>% mutate(profit = revenue - cost)\n\n\n\n\n\n\n\n\n\n\n\n\ndf[df$temperature > 45]\n\n\n\n\n\ndf %>% filter(temperature > 45)\n\n\n\n\n\n\n\n\n\n\n\nI’m not sure how to do this in BaseR… and that’s okay\n\n\n\n\n\ndf %>% \n    group_by(city) %>% \n    summarise(Avg_House_Price = mean(house_price))\n\n\n\n\n\n\n\n\n\n\n\nmtcars[order(mpg, -cyl),]\n\n\n\n\n\nmtcars %>% arrange(mpg, desc(cyl))\n\n\n\n\n\nCheck out this page for more comparisons.\nFiltering Data in Base R:\n\nhttps://www.mitchcraver.com/2021/06/15/subsetting-and-filtering-a-data-frame-in-r/\nhttps://cran.r-project.org/web/packages/crunch/vignettes/filters.html"
  }
]