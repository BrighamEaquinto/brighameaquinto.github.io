[
  {
    "objectID": "main.html",
    "href": "main.html",
    "title": "R Bootcamp",
    "section": "",
    "text": "Week 2\n\n\n\n\n\n\n\n\n\n\n\n\nOct 5, 2001\n\n\n\n\n\n\n\n\nWeek 3\n\n\n\n\n\n\n\n\n\n\n\n\nOct 12, 2001\n\n\n\n\n\n\n\n\nWeek 4\n\n\n\n\n\n\n\n\n\n\n\n\nOct 19, 2001\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/weeks/Oct_5th.html",
    "href": "posts/weeks/Oct_5th.html",
    "title": "Week 2",
    "section": "",
    "text": "this"
  },
  {
    "objectID": "posts/weeks/Oct_5th.html#that",
    "href": "posts/weeks/Oct_5th.html#that",
    "title": "Week 2",
    "section": "That",
    "text": "That\nthat"
  },
  {
    "objectID": "posts/Reading Data/reading_data.html",
    "href": "posts/Reading Data/reading_data.html",
    "title": "Reading Data",
    "section": "",
    "text": "The readr package is the first package that we will learn about. This allows us to read in rectangular data like cvs files.\nThis is the typical way it goes when you have data located on your computer.\n\nlibrary(tidyverse)\n\ndataset <- read_csv(file_path)\n\nhead(dataset)\n\nCopy the file path from your computer and paste it in the function. One downside to this is you have to manually replace each backslash \\ with a forwardslash /\nHere is an example:\n\nlibrary(tidyverse)\n\nbob <- read_csv(\"C:/Users/Bethany/Downloads/US_Population_200_Years.csv\")\n\nhead(bob)\n\n# A tibble: 6 × 7\n   Rank City             Population  Year PopDate    Longitude Latitude\n  <dbl> <chr>                 <dbl> <dbl> <chr>          <dbl>    <dbl>\n1     1 New York, NY          33131  1790 06/01/1790     -73.9     40.7\n2     2 Philadelphia, PA      44096  1790 06/01/1790     -75.1     40.0\n3     3 Boston, MA            18320  1790 06/01/1790     -71.1     42.3\n4     4 Charleston, SC        16359  1790 06/01/1790     -80.0     32.8\n5     5 Baltimore, MD         13503  1790 06/01/1790     -76.6     39.3\n6     7 Salem, MA              7921  1790 06/01/1790     -70.9     42.5"
  },
  {
    "objectID": "posts/Reading Data/reading_data.html#method-2-import-dataset-button-option",
    "href": "posts/Reading Data/reading_data.html#method-2-import-dataset-button-option",
    "title": "Reading Data",
    "section": "Method 2: “Import Dataset” Button Option",
    "text": "Method 2: “Import Dataset” Button Option\nAnother option is to use the “Import Dataset” button in the environment pane of RStudio.\n\n\nThe data will now be in your environment."
  },
  {
    "objectID": "posts/Reading Data/reading_data.html#method-3-getting-data-from-a-url",
    "href": "posts/Reading Data/reading_data.html#method-3-getting-data-from-a-url",
    "title": "Reading Data",
    "section": "Method 3: Getting data from a URL",
    "text": "Method 3: Getting data from a URL\nOften you get your data from online somewhere like GitHub or Kaggle. While there is the option to download the file, then read it from your computer locally, like we just did above, there’s also the option to read in data from a URL.\nA benefit is that less memory is used on your computer. Another is that you can send your analysis with the data being read in from a URL, and others will be able to run the script without any data issues.\nBelow is an example.\n\nlibrary(tidyverse)\n\ndata1 <- read_csv(\"https://raw.githubusercontent.com/saundersg/Statistics-Notebook/master/Data/Rent.csv\")\n\nhead(data1)"
  },
  {
    "objectID": "posts/Reading Data/reading_data.html#other-data-file-formats",
    "href": "posts/Reading Data/reading_data.html#other-data-file-formats",
    "title": "Reading Data",
    "section": "Other Data File Formats",
    "text": "Other Data File Formats\nWhat if the dataset you have is not a csv? What if it’s an excel file or the often unused tsc?\nOther options include:\n\nread_excel() to read excel files like xls or xlsx\nread_tsv() to read tsv files (tab separated files)\nread_rds() to read RDS files (a data export option from SQLServer)"
  },
  {
    "objectID": "posts/Reading Data/reading_data.html#exceptions-to-the-norm",
    "href": "posts/Reading Data/reading_data.html#exceptions-to-the-norm",
    "title": "Reading Data",
    "section": "Exceptions to the Norm",
    "text": "Exceptions to the Norm\nFor most cases this is the way to read in data. There are some examples of variations.\nSometimes the column headers are not the top row of the data. In this scenario, use the option skip = 1 if there is one extra row above the headers.\nSometimes there are not column name at all and we’ll have to give them to the dataset. How can we do this?"
  },
  {
    "objectID": "posts/Reading Data/reading_data.html#writing-files",
    "href": "posts/Reading Data/reading_data.html#writing-files",
    "title": "Reading Data",
    "section": "Writing Files",
    "text": "Writing Files\nWith readr, we can write data files.\n\nwrite_csv(dataset_to_save, \"file_name.csv\")"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Brigham Eaquinto",
    "section": "",
    "text": "Make tutorials like Greg Hamel’s work:\n\nIntro to R notebook with videos\nPython for Data Analysis notebook with videos\n\n\nRead more often - humanities"
  },
  {
    "objectID": "notes.html",
    "href": "notes.html",
    "title": "DSS R BootCamp",
    "section": "",
    "text": "Options:\nCan’t enter or color headers using Markdown, must use CSS instead: <h6 align=\"center\"; style=\"color:#808080\"> Base R </h6>"
  },
  {
    "objectID": "notes.html#ideas",
    "href": "notes.html#ideas",
    "title": "DSS R BootCamp",
    "section": "Ideas",
    "text": "Ideas\n\nHave a notes to instructors page or part of the repo\nhave a page just for the interface of RStudio\n\nhot keys\nshortcuts\nsuch and such\n\nhave a page for R/Python equivalents\nhave a page for other generally useful things\n\nsetting up R in VSCode: https://github.com/REditorSupport/vscode-R or https://marketplace.visualstudio.com/items?itemName=REditorSupport.r or https://github.com/REditorSupport/vscode-R/wiki/Installation:-Windows\n\nhow can I use the wiki tab on the github page? What is the proper usage of it?\n\nOthers: - commenting code - assignment operator vs equal sign - pipe operator %>% - filtering operators (==, %in%, |, &, !=) - c(vector) and list conversation\nUse this for advance select statements: https://dplyr.tidyverse.org/reference/select.html"
  },
  {
    "objectID": "posts/Installation/installation.html#download-instructions",
    "href": "posts/Installation/installation.html#download-instructions",
    "title": "Installation",
    "section": "Download Instructions",
    "text": "Download Instructions\nGoogle “download R” or go to this link to download it. The page should look like this.\n\n\nGoogle “download RStudio” or go to this link to download it. The page should look like this."
  },
  {
    "objectID": "posts/Quarto Tutorial/quarto.html",
    "href": "posts/Quarto Tutorial/quarto.html",
    "title": "Quarto Tutorial",
    "section": "",
    "text": "This page"
  },
  {
    "objectID": "posts/Visualize Data/visualizing_data.html",
    "href": "posts/Visualize Data/visualizing_data.html",
    "title": "Visualize Data",
    "section": "",
    "text": "#ggplot"
  },
  {
    "objectID": "posts/weeks/Oct_12th.html",
    "href": "posts/weeks/Oct_12th.html",
    "title": "Week 3",
    "section": "",
    "text": "Read in this dataset from this URL: https://raw.githubusercontent.com/saundersg/Statistics-Notebook/master/Data/Rent.csv\nFrom this dataset:\n\nselect the Apartment, Gender, and Price columns\nfilter the Gender column to female apartments and remove NAs !is.na(Price)\nfind the average price of apartments\n\n\nhousing_data <- read_csv(\"https://raw.githubusercontent.com/saundersg/Statistics-Notebook/master/Data/Rent.csv\")\nhead(housing_data)\n\n# Starter Code\nhousing_data %>% \n    select() %>% \n    filter( , !is.na(Price)) %>% \n    summarise(mean())"
  },
  {
    "objectID": "posts/weeks/Oct_12th.html#second-practice",
    "href": "posts/weeks/Oct_12th.html#second-practice",
    "title": "Week 3",
    "section": "Second Practice",
    "text": "Second Practice\nThe iris dataset is built into R.\n\nCreate a new column to tell if the Sepal.Length is bigger than or equal to 5\nSort the data by Petal.Length\n\n\nhead(iris)\n\n# Starter Code\niris %>%\n    mutate() %>% \n    arrange()"
  },
  {
    "objectID": "posts/weeks/Oct_12th.html#third-practice",
    "href": "posts/weeks/Oct_12th.html#third-practice",
    "title": "Week 3",
    "section": "Third Practice",
    "text": "Third Practice"
  },
  {
    "objectID": "posts/weeks/Oct_19th.html",
    "href": "posts/weeks/Oct_19th.html",
    "title": "Week 4",
    "section": "",
    "text": "Before we do any exercises, make sure to run this code:\nThis is our dataset for this practice:"
  },
  {
    "objectID": "posts/weeks/Oct_19th.html#exercise-2",
    "href": "posts/weeks/Oct_19th.html#exercise-2",
    "title": "Week 4",
    "section": "Exercise 2",
    "text": "Exercise 2\nthis"
  },
  {
    "objectID": "posts/weeks/Oct_19th.html#exercise-3",
    "href": "posts/weeks/Oct_19th.html#exercise-3",
    "title": "Week 4",
    "section": "Exercise 3",
    "text": "Exercise 3\nthen this"
  },
  {
    "objectID": "posts/Welcome/welcome.html",
    "href": "posts/Welcome/welcome.html",
    "title": "Welcome to Bootcamp",
    "section": "",
    "text": "Welcome to Data Science Society’s R Bootcamp"
  },
  {
    "objectID": "posts/Welcome/welcome.html#course-outline",
    "href": "posts/Welcome/welcome.html#course-outline",
    "title": "Welcome to Bootcamp",
    "section": "Course Outline:",
    "text": "Course Outline:\nThe purpose of R Bootcamp is to be able to read, wrangle, and visualize data using R in RStudio. By the end of the course you will be able to contribute to a society project next semester.\n\nReading Data: readr package\n\nnavigating file systems\ncopy file paths\nRStudio’s “Import Dataset” button, “From Text (readr)” option\n\n\n\nWrangling Data: dplyr/tidyr packages\nPrimary Focus: select, filter, mutate, groupby/summarise, and arrange.\nSecondary Focus: joining, pivoting, case_when,\nOther: drop_na(), replace_na(),\n\n\nVisualizing Data: ggplot2 package\n\nWhat kind of data these plot plot\ncode for each\nhistograms, boxplots, scatterplots, bar charts.\n\nIn Terms of Packages:\n\nreadr\ndplyr/tidyr\nggplot\n\nOthers:\n\nforcats (fct_reorder and working with factors)\nstringr (working with text data)\nlubridate (working with dates)\ntibble (just the tibble() function)\npurr (mappings, boring)"
  },
  {
    "objectID": "posts/Welcome/welcome.html#what-kind-of-data-are-we-using",
    "href": "posts/Welcome/welcome.html#what-kind-of-data-are-we-using",
    "title": "Welcome to Bootcamp",
    "section": "What kind of data are we using?",
    "text": "What kind of data are we using?\nWe will mainly be using the _____ and the ____ datasets for practice.\nWhat is data? Is it singular or plural?\nWhat other types of data are there? Take this for example ____\nWe will be working with tabular data. Other data includes pictures, videos, and audio.\nThere are different types of data, we won’t get into the nitty-gritty parts of it, but there is structured, semi-structured, and ustructured data. We will be playing around with structured data (think excel files). Examples of the other types of data are pictures, video, and audio files.\n\nreadr: for data import\ndplyr: for data manipulation\ntidyr: for data tidying\nggplot2: for data visualisation\ntibble: for tibbles, a modern re-imagining of data frames\nstringr: for strings\nforcats: for factors\npurrr: for functional programming\n+\nlubridate: for dates"
  },
  {
    "objectID": "posts/Wrangling Data/wrangling_data.html",
    "href": "posts/Wrangling Data/wrangling_data.html",
    "title": "Wrangling Data",
    "section": "",
    "text": "Base R is the native tools that R has to deal with data. The syntax is outdated and better tools are available to use.\nThe syntax to work in Base R is very similar to native python syntax. The biggest downside is that it’s not possible to chain operations together like selecting columns and filtering data. You would to constantly assign and reassign variables which results in very messy and unreadable code.\nIf you use this, I will turn in my grave. Please don’t make your life more difficult, use the Tidyverse.\nBase R is native to R; no additional installations are required.\n\n\n\n\nThe Tidyverse allows chainable actions like this:\n\nnew_dataset <- dataset %>% \n    select() %>%\n    filter() %>% \n    mutate() %>% \n    group_by() %>% \n    summarise() %>%\n    arrange()\n\nRun this code in the console to download the tidyverse\n\ninstall.packages(\"tidyverse\")\n\nIn order to be able to use this package, put this code at the top of your R Script or RMD file\n\nlibrary(tidyverse)\n\n\n\n\n\n\n\n\n\n\n\ndf$column_name\ndf[[]]\n\n\n\n\n\ndf %>% select(column1, column2)\n\n\n\n\n\n\n\n\n\n\n\ndf$profit <- df$revenue - df$cost\n\n\n\n\n\ndf %>% mutate(profit = revenue - cost)\n\n\n\n\n\n\n\n\n\n\n\n\ndf[df$temperature > 45]\n\n\n\n\n\ndf %>% filter(temperature > 45)\n\n\n\n\n\n\n\n\n\n\n\nI’m not sure how to do this in BaseR… and that’s okay\n\n\n\n\n\ndf %>% \n    group_by(city) %>% \n    summarise(Avg_House_Price = mean(house_price))\n\n\n\n\n\n\n\n\n\n\n\nmtcars[order(mpg, -cyl),]\n\n\n\n\n\nmtcars %>% arrange(mpg, desc(cyl))\n\n\n\n\n\nCheck out this page for more comparisons.\nFiltering Data in Base R:\n\nhttps://www.mitchcraver.com/2021/06/15/subsetting-and-filtering-a-data-frame-in-r/\nhttps://cran.r-project.org/web/packages/crunch/vignettes/filters.html"
  },
  {
    "objectID": "posts/welcome/welcome.html",
    "href": "posts/welcome/welcome.html",
    "title": "Welcome to Bootcamp",
    "section": "",
    "text": "Welcome to Data Science Society’s R Bootcamp"
  },
  {
    "objectID": "posts/welcome/welcome.html#course-outline",
    "href": "posts/welcome/welcome.html#course-outline",
    "title": "Welcome to Bootcamp",
    "section": "Course Outline:",
    "text": "Course Outline:\nThe purpose of R Bootcamp is to be able to read, wrangle, and visualize data using R in RStudio. By the end of the course you will be able to contribute to a society project next semester.\n\nReading Data: readr package\n\nnavigating file systems\ncopy file paths\nRStudio’s “Import Dataset” button, “From Text (readr)” option\n\n\n\nWrangling Data: dplyr/tidyr packages\nPrimary Focus: select, filter, mutate, groupby/summarise, and arrange.\nSecondary Focus: joining, pivoting, case_when,\nOther: drop_na(), replace_na(),\n\n\nVisualizing Data: ggplot2 package\n\nWhat kind of data these plot plot\ncode for each\nhistograms, boxplots, scatterplots, bar charts.\n\nIn Terms of Packages:\n\nreadr\ndplyr/tidyr\nggplot\n\nOthers:\n\nforcats (fct_reorder and working with factors)\nstringr (working with text data)\nlubridate (working with dates)\ntibble (just the tibble() function)\npurr (mappings, boring)"
  },
  {
    "objectID": "posts/welcome/welcome.html#what-kind-of-data-are-we-using",
    "href": "posts/welcome/welcome.html#what-kind-of-data-are-we-using",
    "title": "Welcome to Bootcamp",
    "section": "What kind of data are we using?",
    "text": "What kind of data are we using?\nWe will mainly be using the _____ and the ____ datasets for practice.\nWhat is data? Is it singular or plural?\nWhat other types of data are there? Take this for example ____\nWe will be working with tabular data. Other data includes pictures, videos, and audio.\nThere are different types of data, we won’t get into the nitty-gritty parts of it, but there is structured, semi-structured, and ustructured data. We will be playing around with structured data (think excel files). Examples of the other types of data are pictures, video, and audio files.\n\nreadr: for data import\ndplyr: for data manipulation\ntidyr: for data tidying\nggplot2: for data visualisation\ntibble: for tibbles, a modern re-imagining of data frames\nstringr: for strings\nforcats: for factors\npurrr: for functional programming\n+\nlubridate: for dates"
  },
  {
    "objectID": "posts/weeks/lesson4.html",
    "href": "posts/weeks/lesson4.html",
    "title": "DSS R BootCamp",
    "section": "",
    "text": "dat <- read_csv(“https://covid.ourworldindata.org/data/owid-covid-data.csv”) object_size(dat) view(dat)\ndat <- read_csv(“datasets/insurance.csv”)"
  },
  {
    "objectID": "posts/weeks/Oct_19th.html#lets-learn-about-group_by-summarise",
    "href": "posts/weeks/Oct_19th.html#lets-learn-about-group_by-summarise",
    "title": "Week 4",
    "section": "Let’s learn about group_by() %>% summarise()",
    "text": "Let’s learn about group_by() %>% summarise()\nWhat if we want to learn:\n\nthe average BMI by gender\nthe total sum of charges by region in the US\nmin & max of children by  age\n\nAll of these are examples uses for group_by() and summarise() statements."
  },
  {
    "objectID": "posts/weeks/Oct_19th.html#exercise-1",
    "href": "posts/weeks/Oct_19th.html#exercise-1",
    "title": "Week 4",
    "section": "Exercise 1",
    "text": "Exercise 1\n\ndat <- read_csv(\"C:/Users/Bethany/Downloads/myblog/datasets/insurance.csv\")\n\n# n_distinct(dat$region)\n# count(dat$region)\n# table(dat$region) \n\n\ndat %>% \n    group_by(region) %>% \n    summarise(\n        Count = n(), \n        Mean = mean(bmi), \n        Sum = sum(charges) %>% round()\n        )\n\n# A tibble: 4 × 4\n  region    Count  Mean     Sum\n  <chr>     <int> <dbl>   <dbl>\n1 northeast   324  29.2 4343669\n2 northwest   325  29.2 4035712\n3 southeast   364  33.4 5363690\n4 southwest   325  30.6 4012755\n\n\n\ndat %>% \n    group_by(region, smoker) %>% \n    summarise(\n        Count = n(), \n        Mean = mean(bmi), \n        Sum = sum(charges) %>% round()\n        ) \n\n`summarise()` has grouped output by 'region'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 8 × 5\n# Groups:   region [4]\n  region    smoker Count  Mean     Sum\n  <chr>     <chr>  <int> <dbl>   <dbl>\n1 northeast no       257  29.3 2355542\n2 northeast yes       67  28.6 1988127\n3 northwest no       267  29.2 2284576\n4 northwest yes       58  29.1 1751136\n5 southeast no       273  33.4 2192795\n6 southeast yes       91  33.1 3170895\n7 southwest no       267  30.5 2141149\n8 southwest yes       58  31.0 1871606"
  },
  {
    "objectID": "posts/weeks/Oct_19th.html#exercise-1-average-bmi-by-gender",
    "href": "posts/weeks/Oct_19th.html#exercise-1-average-bmi-by-gender",
    "title": "Week 4",
    "section": "Exercise 1: Average BMI by Gender",
    "text": "Exercise 1: Average BMI by Gender\n\ndat %>% \n    group_by(sex) %>%\n    summarise(Average_Age = mean(age))\n\n# A tibble: 2 × 2\n  sex    Average_Age\n  <chr>        <dbl>\n1 female        39.5\n2 male          38.9"
  },
  {
    "objectID": "posts/weeks/Oct_19th.html#exercise-2-average-bmi-by-age",
    "href": "posts/weeks/Oct_19th.html#exercise-2-average-bmi-by-age",
    "title": "Week 4",
    "section": "Exercise 2: Average BMI by Age",
    "text": "Exercise 2: Average BMI by Age\n\ndat %>% \n    group_by(age) %>% \n    summarise(mean(bmi)) %>% \n    head() \n\n# A tibble: 6 × 2\n    age `mean(bmi)`\n  <dbl>       <dbl>\n1    18        31.3\n2    19        28.6\n3    20        30.6\n4    21        28.2\n5    22        31.1\n6    23        31.5"
  },
  {
    "objectID": "posts/weeks/Oct_19th.html#exercise-3-sum-of-charges-by-region",
    "href": "posts/weeks/Oct_19th.html#exercise-3-sum-of-charges-by-region",
    "title": "Week 4",
    "section": "Exercise 3: Sum of Charges by Region",
    "text": "Exercise 3: Sum of Charges by Region\nUse the code below to get you started. Find the sum of the charges by region.\nStarter Code:\n\ndat %>% \n    group_by() %>% \n    summarise()\n\nThis is the correct output\n\n\n# A tibble: 4 × 2\n  region    Total_Charges\n  <chr>             <dbl>\n1 northeast      4343669.\n2 northwest      4035712.\n3 southeast      5363690.\n4 southwest      4012755.\n\n\nAttempt the code above then use this dropdown for help\n\n\nAnswer\ndat %>% \n    group_by(region) %>% \n    summarise(Total_Charges = sum(charges))"
  },
  {
    "objectID": "posts/weeks/Oct_19th.html#exercise-4-min-max-of-children-by-age",
    "href": "posts/weeks/Oct_19th.html#exercise-4-min-max-of-children-by-age",
    "title": "Week 4",
    "section": "Exercise 4: Min & Max of Children by Age",
    "text": "Exercise 4: Min & Max of Children by Age\n\ndat %>% \n    group_by(age) %>%\n    summarise(\n        Min = min(children),\n        Max = max(children)\n        ) %>% \n    head()\n\n# A tibble: 6 × 3\n    age   Min   Max\n  <dbl> <dbl> <dbl>\n1    18     0     4\n2    19     0     5\n3    20     0     5\n4    21     0     4\n5    22     0     3\n6    23     0     3"
  },
  {
    "objectID": "posts/weeks/Oct_19th.html#exercise-5-average-charges-by-sex-and-by-smoker",
    "href": "posts/weeks/Oct_19th.html#exercise-5-average-charges-by-sex-and-by-smoker",
    "title": "Week 4",
    "section": "Exercise 5: Average Charges by Sex and by Smoker",
    "text": "Exercise 5: Average Charges by Sex and by Smoker\n\ndat %>% \n    group_by(sex, smoker) %>% \n    summarise(\n        Average_Charges = mean(charges), \n        Total_Charges = sum(charges))\n\n`summarise()` has grouped output by 'sex'. You can override using the `.groups`\nargument.\n\n\n# A tibble: 4 × 4\n# Groups:   sex [2]\n  sex    smoker Average_Charges Total_Charges\n  <chr>  <chr>            <dbl>         <dbl>\n1 female no               8762.      4792977.\n2 female yes             30679.      3528085.\n3 male   no               8087.      4181085.\n4 male   yes             33042.      5253679."
  }
]